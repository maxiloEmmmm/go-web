// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x8f\xdb\xb8\x11\x7f\xae\xff\x8a\x39\x21\x08\x24\x43\xe1\x5e\xef\x82\x3c\x2c\xe0\x02\xce\xee\x66\xe3\x22\xc8\x6e\xb3\x49\x5b\x20\x58\xe4\x68\x69\xe4\x65\x22\x93\x02\x4d\x6d\x92\xfa\xf4\xbf\x17\xfc\x90\x45\x7d\xda\x6d\xae\xf5\x8b\x25\x72\xe6\x37\xdf\xc3\xa1\xf6\x7b\x48\x31\x63\x1c\x21\x48\x4a\x99\x06\x50\x55\xb3\xfd\xfe\x6c\x0e\xcb\x34\x05\xf5\x80\xb0\xa6\x3b\x84\x07\xa4\x29\x4a\xc8\x84\x34\x6b\x1b\xe4\x28\xa9\xc2\x14\x32\x96\x23\xcc\xcf\x0c\x13\x3c\x29\xbe\x6c\xe0\x7c\x61\x59\x9e\x90\x0b\xc1\x33\xb6\x21\xb7\x34\xf9\x42\x37\x68\x81\x41\xe1\xb6\xc8\xa9\x42\x08\x2c\x66\x00\x4f\xf4\xce\x8c\x6d\x0b\x21\x15\x84\x33\x00\x80\x44\x70\x45\x13\x05\xc1\x86\xa9\x87\x72\x4d\x12\xb1\x3d\xdb\xd2\x6f\x2c\x17\x57\xdb\xed\x76\x7b\xb6\x11\xcf\xbe\xe2\xfa\xcc\x91\x05\x86\xc7\xa7\xdd\x08\xb1\xc9\xf1\xac\x2c\x59\x3a\xb0\xc9\xf8\xb3\x8d\xe0\x2c\xd1\x4f\x76\x7b\x23\x3e\x29\x21\xf2\x29\x79\x7a\xdf\x61\xed\x94\x4c\x04\x7f\x6c\xde\x18\xdf\xec\x82\x59\x34\x33\x3e\xd8\x8a\x14\x73\xed\x85\x80\x16\x85\x71\xe7\x2c\x2b\x79\x02\x96\x6e\x95\x86\x2c\x75\xcf\x91\xfb\x87\xbd\x41\x92\xa8\x4a\xc9\x81\xa5\xb3\x9a\x85\x71\xd5\xa6\x67\x5c\x39\xe2\x47\x9a\xc7\xf0\x49\x8b\x71\xda\x90\xa5\x12\x2c\x64\x69\xe4\x63\x3d\xd2\xdc\x07\xfb\xf5\x97\x1e\xdc\xaf\xbf\x74\xa4\xeb\xa5\x90\x71\xf5\xe2\xb9\xa1\x8d\x22\x1f\xc0\x2d\xfa\x00\x2f\x9e\x8f\x6a\x74\x4b\xe5\x0e\x57\x5c\x85\x2c\x8d\xe1\xcf\x3f\xc7\xf0\xe2\xf9\xa8\x76\x3a\x54\x6d\x6c\xbd\x42\x3e\x7c\x58\x5d\x3a\xfc\xd2\xa1\x9b\x75\x03\x6d\xac\xfd\x93\x03\x2b\x0f\x50\x1c\xbf\x2e\x0b\x16\x26\x39\x43\xae\x60\x7e\x61\xfe\x63\x10\x85\x82\xf9\xb2\x60\x37\x85\x62\x82\x47\xe6\xd9\x41\x8b\xf5\x67\x8d\xfc\x74\x59\xb0\xbd\x25\x3f\x07\xcb\x5e\xcd\x0c\x01\xcb\x0c\xfb\x4f\x0b\xe0\x2c\x77\x4c\x6e\x3d\x47\x1e\x8a\x42\x91\x57\x0c\xf3\x74\x17\xc1\x5f\xe0\x67\x8f\x40\xff\x68\xa6\xc1\x97\x89\x16\x6b\xa9\xf6\x55\x87\x80\xdc\xa1\xb2\x5b\x1e\xd6\xc7\xe0\x42\x22\x55\x18\xdc\x47\x2d\x72\xb1\xfe\xec\x28\x88\x25\x80\x05\xd0\x6c\xd6\x95\xf9\xdf\x89\xfc\x50\xa4\xd3\x22\x2d\x81\x15\x59\x6f\x5b\xec\xca\x8f\xad\x58\x7f\xd6\x01\x51\xdf\x0b\x84\x83\xd3\x75\x6c\xcb\xa4\x4e\x61\x0b\x08\x5b\x5a\x7c\xb4\x31\xbf\xff\x78\x6f\x1f\x7c\xce\x41\x9e\xd6\x9a\xfe\x39\x47\xf8\x16\x1f\xf6\x9c\xc6\xbd\x3d\xab\xef\x45\x2b\x4d\x1a\xc9\x1e\x75\x5b\xdc\x6b\xba\x83\xb5\x10\xf9\x88\x0d\x66\xab\x4e\xc5\x90\x66\x30\xf7\xa1\xa2\xc6\xeb\x99\x65\xad\x6d\x8e\x1c\x3c\xcd\x88\x96\xb0\x00\x25\x4b\xac\x57\x9c\x98\x05\x6c\xe9\x17\x0c\x3b\xd2\x62\x93\x83\x16\x2e\xb2\x71\xd3\x7d\xfa\x53\x0c\x66\x4d\x27\x9f\xa4\x7c\x83\xe0\x24\x36\x5e\x3b\x20\x7f\x34\x5b\xf7\xbe\xd4\x4a\x1b\xa1\xfb\x19\x17\x29\xee\x34\x48\xc6\x72\x85\xf2\xad\x48\x75\x6f\x7f\x6b\x56\xab\xda\x5d\x57\x3c\x2d\x84\xee\x4e\x8c\x2b\x94\x19\x4d\xd0\x89\x79\xc3\x76\x2a\x9c\xbb\x46\x4d\xae\x19\x7f\x8d\x79\x61\x95\xb4\x71\x19\xd9\xb4\x01\x1d\xd9\xbc\xc6\x31\xcc\x4b\xcc\x71\x90\xad\x56\xf4\xa2\x94\xe9\xcb\x92\xe5\xfa\x34\x6b\x85\x75\x59\xb0\x81\xbc\xda\xef\x9d\xef\x9e\x70\xed\x02\xe7\x8c\xaa\x5d\x4c\xc6\x4b\xe4\x2d\xdd\xea\x33\x0e\xe6\xad\xd7\x65\xc1\x7c\x30\xe4\x69\xcd\x5d\x1d\xb2\xe4\x2d\x7e\xf5\xd4\x0a\x23\x98\xfb\x5a\x5a\x65\x92\xb5\xe9\x50\xde\x86\xab\xe8\xa3\x1a\x26\x6b\xa2\x6d\x23\x6d\x2d\x17\xf0\xb4\xab\x67\x03\xe8\x69\xe9\xca\x39\x59\x37\x39\x9d\xac\x5b\x0a\x46\xef\x44\xa9\x30\x2c\x24\x66\xec\x9b\xeb\xde\x31\x48\xd8\x30\x4e\x56\x66\x4f\x46\x30\xd7\x6f\xf6\xe5\x5a\x8a\xb2\x70\x56\xb1\x0c\x7e\x72\xe7\xa7\xce\xfa\x5b\x83\x11\x06\x67\x41\x0c\x16\x2f\xf2\x62\xe1\x24\x2c\xea\xd3\x9a\xdc\x19\xce\xbf\x0a\xc6\x5b\x2c\x5e\x71\x9b\x69\x44\x12\x23\x32\xac\xb7\x4f\x76\x9b\x65\xdb\xc4\x10\x58\x57\x35\x83\x4c\x10\x0f\xbb\x35\xea\x78\xd0\x77\xe1\x66\xdc\x83\x4e\x90\x71\x4c\xd7\x53\x31\x14\x54\x3d\x1c\xfc\x4a\x0b\x76\x28\xb6\x43\xcb\x28\x98\x75\xea\xf9\x02\x0c\x48\x6d\x30\x55\x0f\x51\x8b\x82\x5c\x5f\xbd\x0f\x03\xad\x7d\xbb\x3e\x5e\x53\x9e\xe6\x18\xd2\x82\x11\x5d\xb0\xd1\x10\xd7\xd9\x39\x4b\x27\x39\xaf\xb1\xc7\x78\x7b\x73\x77\x4c\x9e\x2d\xf4\x1e\xe3\xf2\xfd\xc5\xeb\x13\x64\xda\x1e\xd2\xe5\xbe\xbc\x7a\x73\xf5\xfe\xea\x04\x76\xdb\x2e\xec\x8c\x33\x99\x11\x3a\xca\xae\x7d\x9a\xbd\xba\x23\xd7\x31\xd6\xfb\x12\x13\x64\x8f\x28\x1d\xc5\xbb\xfa\xd5\x83\xa0\x05\xbb\xb3\x2d\xe6\x7c\x01\x85\xd4\x0d\xb3\x4e\x9e\x60\x59\xb0\xc0\xa7\x35\x73\xe4\x4a\xe1\xb6\xa1\x0d\x12\x62\x8f\x29\x12\x78\x49\x67\x35\x30\xdd\xad\x2d\xa3\xaa\xfa\x0d\x6d\xee\x37\xa4\x57\xa6\xa3\xf7\xb8\xec\xb2\x2b\xa3\x71\x70\xc7\x3d\x72\x16\xdf\xb2\x02\x41\xa7\x7b\xf8\x80\x79\x01\xdd\x8e\x1c\x43\xd2\x90\xb5\x5b\xa6\xcb\x88\x0e\xde\x32\xd3\xc2\xa6\x00\x99\xf6\xd5\x7c\xa0\x1e\x9b\xc3\xe6\xa8\x52\x65\x43\xd6\x46\xb2\xfc\x37\x1c\xbb\x90\x3f\xa8\x97\x2e\xb7\xa3\x5a\xe5\x35\x51\x1b\xe5\x6f\x25\xca\xef\x6d\xa8\x4b\xaa\xe8\x51\x65\xf4\xd0\xd1\xd1\xa7\x39\xb7\xbd\x41\xd1\x56\xc7\x4b\xcc\x84\x9c\xd6\x6f\xd2\xc2\x6b\x3c\x6e\xe0\x06\x8f\xd8\xe7\xf2\xb0\x3e\x2e\xbb\xa9\x78\x7c\xd8\xef\x55\x46\x93\xaf\xae\x3f\x3f\xed\x92\xec\x97\x05\x3b\x6f\xdf\x26\x0c\x70\x54\xf5\x54\x0a\x13\x2d\xa1\xe1\xd6\x1e\x35\x93\xcf\xa0\xbd\xfe\xa1\xa6\x09\xc8\x3b\xdc\x89\x52\x26\x78\x4b\x37\x18\x1a\x3f\xed\x14\x95\x66\x98\x8a\x61\xc7\xfe\x85\x60\xba\x7d\xe8\x05\x29\x06\xef\x00\x38\x9c\x90\xda\x87\xe7\x8b\x4e\xfb\xa8\x2a\x62\x3c\x19\xb6\x67\x7a\x96\x41\x42\x6c\x0d\x93\x43\x16\xf6\x6e\x38\x87\xe3\xb0\x4b\x6a\x4c\x8b\x8d\xc8\x36\x6e\x7b\x36\x4a\x72\xc1\x6d\x3d\xe9\x2e\xc6\x0a\x24\x17\x7a\x25\x8c\x66\x7d\xcd\x1d\xc1\x4d\x96\xed\x50\x59\x17\x44\xe4\x0d\xdb\x32\x15\x6a\x27\x74\xd4\x37\x89\x5c\x83\x2e\xf3\xfc\x9f\x46\x23\xb2\x2c\x8a\x0b\xc1\x15\x7e\x53\x1d\x11\x8f\x54\x42\xaa\xcb\xc3\xf3\x22\x2c\x2c\xce\xa4\x63\x4c\x4d\x8d\x3a\xc6\x40\x2e\xfa\x1c\xce\x3f\x06\x7e\xca\x41\x2e\xfb\x34\x4c\xdc\x78\x8b\x5c\x88\x92\xab\x01\x93\x0e\x20\xfd\xba\x18\x4a\x42\x37\x0f\x1f\x4d\xc3\x52\x32\x33\x5f\xf6\x9a\xb9\xfe\xad\xea\x4b\x39\xfc\x56\x4a\x76\x1e\xb0\x34\xf8\xad\x51\xc4\x6b\x18\x46\xdb\x15\xff\x3b\xcd\x59\xfa\x92\xf1\xf4\x83\x64\x61\x29\x99\x17\x08\xe6\xce\xb3\x5e\x86\x5e\x63\xdf\xda\xd8\x4d\xd6\xab\x4b\xf2\x5e\x1f\x40\x55\xb5\x4a\x35\x1e\x59\xa5\x51\x34\x1b\x0a\x57\xab\x63\x0d\x86\x6c\x90\xd4\x8b\x55\x34\xeb\x87\xa9\xa7\xac\xe5\xbd\xe1\x18\x1a\x16\x72\xf5\x0d\x93\x89\x58\xb5\x6a\xdc\x45\xe4\xb4\xf0\xb9\x5b\xd0\xd1\xf0\xad\x45\xfa\x7d\x3c\x7e\xb7\xf4\x7b\x2e\x68\xda\xbe\xa7\x9c\x14\xc0\x50\x03\x7b\xe1\x1b\x6d\x30\x4e\xd1\xc8\xf3\xd9\xb3\x7a\x9c\x32\x9f\x3f\xea\xe9\xa9\x73\x75\xd2\x17\x80\xa4\xfd\x35\xc3\x5c\x7f\x7f\xff\x1d\xba\xcb\xf5\x17\x0a\x33\x8a\x11\xeb\x23\xb3\xa6\xe7\xf1\xfb\x81\xca\x34\x8d\xe1\x0e\xd5\x10\x83\x31\x8c\x38\xc7\x90\x21\x8a\xb1\x9a\xd5\x86\xf9\xd3\x7d\x37\x05\xbd\xe9\x67\x3a\x01\x1b\xc2\xc1\x56\x5a\xf5\x8b\xc6\x1a\x44\x1f\x71\xaa\xd5\xf5\x75\xb1\x13\xca\x29\xca\x18\xca\x91\x62\x18\xce\xe6\xb0\x21\x3b\x96\xcb\xee\xba\x7f\x6a\x2b\xfa\xe3\x3b\xd1\xd3\x76\x2b\xfa\xd1\x9a\xf9\x1f\xf7\x34\x83\xba\x18\x0a\x9a\x6f\x5b\x18\x48\x17\x89\x20\x86\x80\x0b\x05\x99\x28\x79\x1a\x78\x91\x03\xcc\x77\x38\x32\x28\x68\x21\xee\x0e\xd5\x99\x0e\x4e\xac\x5f\xe8\xd6\xb0\x05\xeb\xd5\xb0\x5b\xfe\x8f\x6b\x18\xfe\xe0\x3a\x86\xde\xf9\xeb\xd5\x73\xc7\xa8\x43\x71\x78\x77\x87\xe3\xf3\x51\x43\x7c\xe2\x84\x64\x03\x3d\x59\xdc\xd3\x8a\x4d\xd4\xf7\x80\x66\xe3\x35\xde\x56\xad\xfa\xe1\x82\xbf\xc6\x13\xe6\xdf\xff\x57\xb5\x1f\x1b\x8d\xc9\x3f\x1e\x50\x62\xd8\xfd\xd0\x43\x56\x97\xe1\x44\xc1\x0e\x4f\x21\xf5\x8d\x67\xba\xe5\x3a\xaa\x91\xe6\x3f\xec\x7c\x93\x24\xaf\x98\xdc\x0d\x8c\x86\x75\x50\x9a\xaf\x4f\x87\xa7\x7f\x07\x00\x00\xff\xff\xc1\x38\xad\x7f\xe4\x1b\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 7140, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
