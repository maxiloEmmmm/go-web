// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\x3a\x12\x7e\x5e\xff\x8a\x39\x42\x11\x48\x86\xca\x9c\xe7\x00\x5e\xc0\x4d\xd2\xd4\x8b\xa2\xc9\x36\xcd\xee\x02\x45\xd0\x43\x4b\x23\x85\x8d\x4c\x6a\x69\xaa\x6d\xd6\xd5\x7f\x5f\xf0\x22\x8b\xba\xf8\xb2\x4d\x17\xa7\x7e\x48\x6c\x72\xee\x33\xfc\x66\xc8\xcd\x06\x52\xcc\x18\x47\x08\x92\x4a\xa6\x01\xd4\xf5\x64\xb3\x39\x9d\xc2\x3c\x4d\x41\x3d\x20\x2c\xe9\x1a\xe1\x01\x69\x8a\x12\x32\x21\xcd\x5a\x8e\x1c\x25\x55\x98\x42\xc6\x0a\x84\xe9\xa9\x61\x82\x17\xe5\x63\x0e\x67\x33\xcb\xf2\x82\x9c\x0b\x9e\xb1\x9c\xdc\xd0\xe4\x91\xe6\x68\x05\x83\xc2\x55\x59\x50\x85\x10\x58\x99\x01\xbc\xd0\x3b\x13\xb6\x2a\x85\x54\x10\x4e\x00\x00\x12\xc1\x15\x4d\x14\x04\x39\x53\x0f\xd5\x92\x24\x62\x75\xba\xa2\xdf\x58\x21\x2e\x57\xab\xd5\xea\x34\x17\x2f\xbf\xe2\xf2\xd4\x91\x05\x86\xc7\xa7\xcd\x85\xc8\x0b\x3c\xad\x2a\x96\x8e\x6c\x32\xfe\x32\x17\x9c\x25\xfa\x9b\xdd\xce\xc5\x27\x25\x44\xb1\x4f\x9f\xde\x77\xb2\xd6\x4a\x32\x9e\xaf\x83\x49\x34\x31\x5e\xaf\x44\x8a\x85\xf6\x3b\xa0\x65\x69\x02\x38\xc9\x2a\x9e\x80\x56\xbf\x48\x43\x96\x82\xe5\x88\xcc\x0a\xb9\xbb\x5b\x5c\xc0\xc6\x88\xaa\x62\xf8\xa4\x19\xcd\xfa\x0d\x95\x6b\x0c\x59\x1a\x4d\xfe\x22\x51\x55\x92\x43\x35\x69\x44\x71\xfc\x3a\x2f\x59\x98\x14\x0c\xb9\x82\xe9\xb9\xf9\x1f\x83\x28\x15\x4c\xe7\x25\xbb\x2e\x15\x13\x3c\x32\xdf\x9d\x68\xb1\xfc\xac\x25\x9f\xcc\x4b\xb6\xb1\xe4\x67\x60\xd9\xeb\x89\x21\x60\x99\x61\xff\x6d\x06\x9c\x15\x8e\xc9\xad\x17\xc8\x43\x51\x2a\xf2\x9a\x61\x91\xae\x23\xf8\x2b\xfc\xee\x11\xe8\x0f\xcd\xb4\xf0\x79\xa2\xd5\x5a\xaa\x4d\xdd\x23\x20\xb7\xa8\xec\x96\x27\xeb\x63\x70\x2e\x91\x2a\x0c\xee\xa3\x0e\xb9\x58\x7e\x76\x14\xc4\x12\xc0\x0c\x68\x36\xe9\xeb\xfc\x31\x95\x77\x65\xba\x5f\xa5\x25\xb0\x2a\x9b\x6d\x2b\xdb\xfe\x75\xe9\x10\xcb\xcf\x3a\x21\xea\xa9\x44\xd8\x06\x5d\xe7\xb6\x4a\x94\x8b\x8f\x15\x08\x2b\x5a\x7e\xb4\x39\xbf\xff\x78\x6f\xbf\xf8\x9c\xa3\x3c\x9d\x35\xfd\x71\x81\xf0\x3d\xde\xee\x39\x8b\x07\x7b\xd6\xde\xf3\x4e\x99\xb4\x9a\x3d\xea\xae\xba\x37\x74\x0d\x4b\x21\x8a\x1d\x3e\x98\xad\xa6\x14\x43\x9a\xc1\xd4\x17\x15\xb5\x51\xcf\x2c\x6b\xe3\x73\xe4\xc4\xd3\x8c\x68\x0d\x33\x50\xb2\xc2\x66\xc5\xa9\x99\xc1\x8a\x3e\x62\xd8\xd3\x16\x9b\x1a\xb4\xe2\x22\x9b\x37\x8d\x3d\x9f\x62\x30\x6b\xba\xf8\x24\xe5\x39\x82\xd3\xd8\x46\x6d\x2b\xf9\xa3\xd9\xba\xf7\xb5\xd6\xda\x09\x7d\x62\xb9\x48\x71\xad\x85\x64\xac\x50\x28\xdf\x89\x54\xe3\xd5\x3b\xb3\x5a\x37\xe1\xba\xe4\x69\x29\x18\x57\xc0\xb8\x42\x99\xd1\x04\x9d\x9a\xb7\x6c\xad\xc2\xa9\x03\x1f\x72\xc5\xf8\x1b\x2c\x4a\x6b\xa4\xcd\xcb\x8e\x4d\x9b\xd0\x1d\x9b\x57\xb8\x4b\xe6\x05\x16\x38\xca\xd6\x18\x7a\x5e\xc9\xf4\x55\xc5\x0a\x8d\xd0\x9d\xb4\xce\x4b\x36\x52\x57\x9b\xcd\x4b\x17\xbc\x17\x5c\xc7\xc0\x45\xa3\xee\x9e\x26\x13\x26\xf2\x8e\xae\x34\x70\xc3\xb4\xf3\x73\x5e\xb2\x8e\x34\xe4\x69\xc3\x5e\x6f\xeb\xe4\x1d\x7e\xf5\x0c\xeb\x41\x57\x04\x53\xdf\x6a\x6b\x5c\xb2\x34\x88\xe5\x6d\xb8\x13\x7e\xd8\xe2\x64\x49\xb4\xb3\xa4\x6b\xf5\x4c\x1b\xd1\xb7\xdc\x59\x12\x6b\xd8\x8b\x26\x23\x2e\xb8\xd3\x9e\x2c\xdb\x92\x4f\x96\x1d\x7b\xa3\xf7\xa2\x52\x18\x96\x12\x33\xf6\xcd\x81\x7b\x0c\x12\x72\xc6\xc9\xc2\xec\xc9\x18\x4a\x96\x3c\x7a\x27\x61\xaa\x37\xed\xde\x95\x14\x55\xe9\x7c\x66\x19\xfc\xe6\xfa\x89\x3e\x23\x37\x46\x64\x18\x9c\x06\x31\x58\xf1\x91\x97\x39\xa7\x70\xd6\xf4\x2b\x72\x6b\x38\xff\x26\x18\xef\xb0\x78\x50\x60\xfa\xb1\x24\x46\x65\xd8\x6c\x9b\x9d\x07\xba\xbe\xd1\x26\x9e\xcd\xac\xa9\xae\x11\x9c\x9c\x98\xa3\xa7\x97\x0c\xf0\x1f\x99\x00\xed\x47\x23\xf1\xfb\xf7\xad\x81\x0b\x3e\x97\x92\x3e\x19\x71\x31\x7c\x78\x2a\xb1\x93\x8e\xa8\xd7\x56\x92\xa5\xb3\x34\x8f\x21\xb0\x94\xed\xf4\x10\xc4\xe3\x69\x8e\x7a\x98\xed\xa5\xd3\xcf\x67\xbe\x3b\x9d\x4e\xa7\x49\x4b\x3f\x4f\x31\x94\x54\x3d\x6c\x93\x4c\x4b\xb6\x05\x86\x2d\xbc\x95\xcc\xa6\xf4\x6c\x06\x46\x48\x13\x6e\xaa\x1e\xa2\x0e\x05\xb9\xba\xfc\x10\x06\xda\x91\xee\x59\x7e\x43\x79\x5a\x60\x48\x4b\x46\x34\xb8\x44\x63\x5c\xa7\x67\x2c\xdd\xcb\x79\x85\x03\xc6\x9b\xeb\xdb\x43\xfa\x2c\x28\x0d\x18\xe7\x1f\xce\xdf\x1c\xa1\xd3\xe2\x5d\x9f\xfb\xe2\xf2\xed\xe5\x87\xcb\x23\xd8\x2d\xb4\x45\x91\xc3\xe5\xdd\x25\xa6\x13\xee\xa0\xde\xec\x35\xdd\xa3\xc9\xb1\xde\x97\x98\x20\xfb\x82\xd2\x51\xbc\x6f\x7e\x7a\x22\x68\xc9\x6e\x2d\x1c\xea\xaa\x97\x1a\xdc\x9b\x3a\x0a\xe6\x25\x0b\x7c\x5a\x33\xd5\x2d\x14\xae\x5a\xda\x20\x21\x16\xbe\x48\xe0\xd5\x9f\xb5\xc0\x20\x71\x57\x47\x5d\x0f\xc1\x77\xea\x63\xe7\x6b\xd3\x7d\x06\x5c\x76\x79\x4b\x75\xfb\xc8\x4a\x9b\xa5\x79\xa5\xc4\x65\x9a\x63\xdb\xab\x9b\x7d\x9b\x87\xe1\xfe\x3e\xe3\x9c\xf6\x1d\x73\xc7\x0d\x2b\x11\xf4\x71\x09\x1f\xb0\x28\xa1\xdf\x7d\x62\x48\x5a\xb2\x6e\x77\xb0\xfc\x9b\x8d\xc6\x84\x07\xba\xd6\x06\xad\x75\x52\xeb\x3a\x06\x34\x3f\x3a\xe4\x66\x7f\xb3\x71\x47\x36\xea\x99\x31\xcf\xb4\x8d\xfb\xec\x60\x3a\x45\x5d\x0b\x9e\xad\xdb\x86\xf3\x60\x08\x44\x91\xf6\x34\xc7\x50\xb5\xac\xdd\x2d\x2b\xf3\x9a\x3f\x3f\x32\x2e\xd9\x07\x23\x33\x66\xde\xff\x23\x5a\x1a\xb2\x0e\xc6\xaa\x68\x88\xba\xca\xff\x5e\xa1\x7c\xea\x8a\xba\xa0\x8a\x1e\xcc\xb8\x1e\x32\xa7\xbd\x5e\xb2\x9d\xd3\xbc\x8b\x81\x45\x98\x57\x98\x09\xb9\xdf\xbe\x91\xc0\xb4\x66\x5d\xe1\x61\x07\x73\x3c\xc2\xbf\x2b\x3c\xce\xbd\xbe\x25\xbd\xdf\xfe\xd9\x6e\x86\xad\xfe\xf1\x3e\x7c\x59\x1c\xa0\x55\x8b\x01\xae\x67\x9e\xf4\x49\x36\xf3\x92\x9d\x75\x6f\xa3\x46\x70\x34\x34\x29\x4c\xb4\x86\x96\x5b\x7b\x61\x26\xe7\x51\xb7\xfd\x49\x40\x13\x90\xf7\xb8\x16\x95\x4c\xf0\x86\xe6\x18\x9a\x70\xad\x15\x95\x66\x18\x8f\x61\xcd\xfe\x83\x60\x3a\x70\xe8\x25\x3d\x06\xaf\x29\x6f\x67\x26\x9d\x93\xb3\x59\x0f\xd2\xeb\x9a\x98\xcc\x84\xdd\x3b\x21\xcb\x20\x21\x16\x17\xc9\xb6\xaa\x07\x37\xe4\xe6\x33\x20\x35\xae\xc5\x46\x65\x57\x6e\x77\xb4\x4e\x0a\xc1\x2d\x42\x98\xd9\xab\x44\x72\xae\x57\xc2\x68\x32\xb4\xdc\x11\x5c\x67\xd9\x1a\x95\x0d\x41\x44\xde\xb2\x15\x53\xa1\x0e\x42\xcf\x7c\x73\x30\x1a\xa1\xf3\xa2\xf8\x97\xb1\x88\xcc\xcb\xf2\x5c\x70\x85\xdf\x54\x4f\xc5\x17\x2a\x21\xd5\xf5\xe8\x45\x11\x66\x56\xce\xde\xc0\x98\x22\xde\x19\x18\x23\x72\x36\xe4\x70\xf1\x31\xe2\xf7\x05\xc8\x55\x9f\x16\x13\xb7\xd1\x22\xe7\xa2\xe2\x6a\xc4\xa5\xad\x90\xe8\xa8\x22\x74\xf7\xa9\x83\x65\x58\x49\x66\xee\x23\x83\x06\xa9\x3f\x8b\x14\x2c\x6e\xbe\xe0\x64\x71\x41\x16\x6b\xf3\xaa\x53\xd7\x76\x4e\xd4\x20\x59\xac\x1d\xb8\x5a\x0a\x3d\xfb\x9a\xdf\xcd\x70\x0a\x7f\x54\x92\x9d\x05\x2c\x0d\xfe\x68\x3d\xf0\x90\xcb\xb8\xb9\xe0\xff\xa0\x05\x4b\x5f\x31\x9e\xde\x49\x16\x56\x92\x79\x19\x64\x6e\x38\x19\x94\xf6\x15\x0e\xc3\x14\x9b\xb9\x78\x68\xb0\x7b\xa4\xaa\x24\x23\x8b\x34\x6a\x0d\xb7\x0b\xad\xb9\xd1\x64\xac\x16\x3a\xf0\x3a\x5a\x0f\xa3\xa4\x5e\x21\xf4\xa7\x77\x18\x8c\x5f\x75\xed\x78\xaf\x39\x86\x86\x85\x5c\x7e\xc3\x64\x4f\x21\x74\x00\xc4\xa5\xfb\xb8\xda\x70\x57\xf4\x83\xb5\xb1\x14\xe9\x93\x29\x8e\x6e\x27\xdd\x9d\xbd\x50\x73\x78\xb9\xdb\x09\x4b\xce\x82\x68\xec\xba\x6e\x1e\xdd\x9a\x39\xb8\x77\x5f\xd7\x17\xb0\xa4\xfb\x86\x66\x1e\x5d\xbe\x7f\x87\xfe\xb2\x7b\x1f\xe9\xdf\xaf\xec\xba\x99\xb4\x89\x8d\x88\x59\x80\xba\xbe\x1f\x39\xe3\x06\x62\x6e\x51\x8d\xd1\x1b\x67\xc9\xd8\xce\xae\x53\xdf\xbf\xb3\x35\x6b\x2c\x83\x5c\x41\xa8\xaf\xa4\xda\x58\x3b\xa1\x44\xf0\x7b\xff\xea\x99\x90\x91\x29\x79\xd3\x7b\xd0\xd8\xc6\x11\xdd\x15\xc1\x8a\xeb\x05\xd2\x89\x34\x2e\x18\x02\xe3\x08\xf6\x1c\xd9\x0d\x7e\xdb\xe0\x38\x7c\x40\x72\xc7\xd9\xbf\x2b\x1d\x61\x1b\x2e\x77\xc0\xe6\x69\xba\x9d\xa5\xc6\x34\x84\x07\x2c\xb0\xe2\xb9\x50\x1d\x15\x84\x90\x91\x09\x6d\x18\x70\x18\xbe\x7b\x1c\xce\x88\x7f\xf2\xbd\x5b\xc2\xfe\x73\xdf\x12\x7a\xed\x71\x7c\xe6\x6c\x3d\x1e\xf1\xa1\x1e\x02\x9f\xad\x41\xfa\x05\xf7\xf5\xb9\xa1\xd1\x76\x72\x3e\xc6\x6a\x43\xe9\x81\xd5\xf3\xcc\xee\xc0\x52\xd8\x82\xdf\x21\x50\x72\x8f\x8a\xc7\x36\xac\x5f\xa8\x5f\x9d\x74\x1b\xd6\xb3\x51\xf3\xcf\xeb\x78\x46\xf3\x6c\xac\x64\x7c\x9b\xc3\x40\xba\xf4\x06\x31\x04\xfa\x6c\x66\xa2\xe2\x69\xe0\x95\x83\xd5\x36\x3e\xa3\x6a\x25\xee\x49\xa5\x37\x98\x1e\xd9\x04\xa0\xdf\x08\xac\xb0\x41\x23\x70\xcb\x3f\xa5\x11\xc0\x4f\x6a\x06\xb0\x0f\x9f\x06\xeb\xc7\x34\x06\xe8\x34\x87\xde\x13\xc9\xd0\x91\xff\xa5\x41\xc0\x4f\x68\x12\xf0\x0b\x37\x8a\x61\x32\x60\xbc\x61\x1c\x9f\x35\x1f\x87\xbd\xf7\x95\xc3\xb7\xab\x96\xd8\x43\xe2\x1f\x6e\x23\x43\x83\x93\x4a\x4a\xe4\x6a\x71\x44\x53\xd9\xef\xcf\x9e\xbe\x32\xe2\x50\xbf\xb7\xc4\xbe\x21\x3f\xec\xd8\xe0\x3e\xa8\xef\x61\xad\xdc\x91\x46\xff\xa3\x5d\xe9\x0a\x8f\xb8\xca\xff\xf2\x2d\xe9\xd0\xf3\x00\xf9\xe7\x03\x4a\x0c\x07\x10\xb9\xb8\x08\x9f\xd9\x5d\xc6\x2f\x54\xcd\x4b\xd3\xfe\xe9\xc4\x51\x8d\xbe\x37\xec\x9a\x93\x5e\x33\xb9\xde\x77\x7b\xee\x59\xb1\xf3\x86\xdf\x14\x55\x8f\x76\xec\x4a\x77\xd4\xec\xb3\x2d\xe5\xf6\xdb\x7f\x03\x00\x00\xff\xff\x5d\x1c\x20\x78\x94\x22\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8852, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
