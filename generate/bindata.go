// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\x3a\x12\x7e\x5e\xff\x8a\x39\x42\x11\x48\x86\xca\x9c\xe7\x00\x5e\xc0\x4d\xd2\xd4\x8b\xa2\xc9\x36\xcd\xee\x02\x45\xd0\x43\x4b\x23\x85\x8d\x4c\x6a\x69\xaa\x6d\xd6\xd5\x7f\x5f\xf0\x22\x8b\xba\xf8\xb2\x9b\x00\xa7\x7e\x48\x6c\x72\xee\x33\xfc\x66\xc8\xcd\x06\x52\xcc\x18\x47\x08\x92\x4a\xa6\x01\xd4\xf5\x64\xb3\x39\x9d\xc2\x3c\x4d\x41\x3d\x20\x2c\xe9\x1a\xe1\x01\x69\x8a\x12\x32\x21\xcd\x5a\x8e\x1c\x25\x55\x98\x42\xc6\x0a\x84\xe9\xa9\x61\x82\x57\xe5\x63\x0e\x67\x33\xcb\xf2\x8a\x9c\x0b\x9e\xb1\x9c\xdc\xd0\xe4\x91\xe6\x68\x05\x83\xc2\x55\x59\x50\x85\x10\x58\x99\x01\xbc\xd2\x3b\x13\xb6\x2a\x85\x54\x10\x4e\x00\x00\x12\xc1\x15\x4d\x14\x04\x39\x53\x0f\xd5\x92\x24\x62\x75\xba\xa2\x3f\x58\x21\x2e\x57\xab\xd5\xea\x34\x17\xaf\xbf\xe3\xf2\xd4\x91\x05\x86\xc7\xa7\xcd\x85\xc8\x0b\x3c\xad\x2a\x96\x8e\x6c\x32\xfe\x3a\x17\x9c\x25\xfa\x9b\xdd\xce\xc5\x17\x25\x44\xb1\x4f\x9f\xde\x77\xb2\xd6\x4a\x32\x9e\xaf\x83\x49\x34\x31\x5e\xaf\x44\x8a\x85\xf6\x3b\xa0\x65\x69\x02\x38\xc9\x2a\x9e\x80\x56\xbf\x48\x43\x96\x82\xe5\x88\xcc\x0a\xb9\xbb\x5b\x5c\xc0\xc6\x88\xaa\x62\xf8\xa2\x19\xcd\xfa\x0d\x95\x6b\x0c\x59\x1a\x4d\xfe\x22\x51\x55\x92\x43\x35\x69\x44\x71\xfc\x3e\x2f\x59\x98\x14\x0c\xb9\x82\xe9\xb9\xf9\x1f\x83\x28\x15\x4c\xe7\x25\xbb\x2e\x15\x13\x3c\x32\xdf\x9d\x68\xb1\xfc\xaa\x25\x9f\xcc\x4b\xb6\xb1\xe4\x67\x60\xd9\xeb\x89\x21\x60\x99\x61\xff\x6d\x06\x9c\x15\x8e\xc9\xad\x17\xc8\x43\x51\x2a\xf2\x96\x61\x91\xae\x23\xf8\x2b\xfc\xee\x11\xe8\x0f\xcd\xb4\xf0\x79\xa2\xd5\x5a\xaa\x4d\xdd\x23\x20\xb7\xa8\xec\x96\x27\xeb\x73\x70\x2e\x91\x2a\x0c\xee\xa3\x0e\xb9\x58\x7e\x75\x14\xc4\x12\xc0\x0c\x68\x36\xe9\xeb\xfc\xff\x54\xde\x95\xe9\x7e\x95\x96\xc0\xaa\x6c\xb6\xad\x6c\xfb\xd7\xa5\x43\x2c\xbf\xea\x84\xa8\xa7\x12\x61\x1b\x74\x9d\xdb\x2a\x51\x2e\x3e\x56\x20\xac\x68\xf9\xd9\xe6\xfc\xfe\xf3\xbd\xfd\xe2\x73\x8e\xf2\x74\xd6\xf4\xc7\x05\xc2\xf7\x78\xbb\xe7\x2c\x1e\xec\x59\x7b\xcf\x3b\x65\xd2\x6a\xf6\xa8\xbb\xea\xde\xd1\x35\x2c\x85\x28\x76\xf8\x60\xb6\x9a\x52\x0c\x69\x06\x53\x5f\x54\xd4\x46\x3d\xb3\xac\x8d\xcf\x91\x13\x4f\x33\xa2\x35\xcc\x40\xc9\x0a\x9b\x15\xa7\x66\x06\x2b\xfa\x88\x61\x4f\x5b\x6c\x6a\xd0\x8a\x8b\x6c\xde\x34\xf6\x7c\x89\xc1\xac\xe9\xe2\x93\x94\xe7\x08\x4e\x63\x1b\xb5\xad\xe4\xcf\x66\xeb\xde\xd7\x5a\x6b\x27\xf4\x89\xe5\x22\xc5\xb5\x16\x92\xb1\x42\xa1\xfc\x20\x52\x8d\x57\x1f\xcc\x6a\xdd\x84\xeb\x92\xa7\xa5\x60\x5c\x01\xe3\x0a\x65\x46\x13\x74\x6a\xde\xb3\xb5\x0a\xa7\x0e\x7c\xc8\x15\xe3\xef\xb0\x28\xad\x91\x36\x2f\x3b\x36\x6d\x42\x77\x6c\x5e\xe1\x2e\x99\x17\x58\xe0\x28\x5b\x63\xe8\x79\x25\xd3\x37\x15\x2b\x34\x42\x77\xd2\x3a\x2f\xd9\x48\x5d\x6d\x36\xaf\x5d\xf0\x5e\x71\x1d\x03\x17\x8d\xba\x7b\x9a\x4c\x98\xc8\x07\xba\xd2\xc0\x0d\xd3\xce\xcf\x79\xc9\x3a\xd2\x90\xa7\x0d\x7b\xbd\xad\x93\x0f\xf8\xdd\x33\xac\x07\x5d\x11\x4c\x7d\xab\xad\x71\xc9\xd2\x20\x96\xb7\xe1\x4e\xf8\x61\x8b\x93\x25\xd1\xce\x92\xae\xd5\x33\x6d\x44\xdf\x72\x67\x49\xac\x61\x2f\x9a\x8c\xb8\xe0\x4e\x7b\xb2\x6c\x4b\x3e\x59\x76\xec\x8d\x3e\x8a\x4a\x61\x58\x4a\xcc\xd8\x0f\x07\xee\x31\x48\xc8\x19\x27\x0b\xb3\x27\x63\x28\x59\xf2\xe8\x9d\x84\xa9\xde\xb4\x7b\x57\x52\x54\xa5\xf3\x99\x65\xf0\x9b\xeb\x27\xfa\x8c\xdc\x18\x91\x61\x70\x1a\xc4\x60\xc5\x47\x5e\xe6\x9c\xc2\x59\xd3\xaf\xc8\xad\xe1\xfc\x9b\x60\xbc\xc3\xe2\x41\x81\xe9\xc7\x92\x18\x95\x61\xb3\x6d\x76\x1e\xe8\xfa\x46\x9b\x78\x36\xb3\xa6\xba\x46\x70\x72\x62\x8e\x9e\x5e\x32\xc0\x7f\x64\x02\xb4\x1f\x8d\xc4\x9f\x3f\xb7\x06\x2e\xf8\x5c\x4a\xfa\x64\xc4\xc5\x10\x74\x72\x11\x44\xbd\xa6\x92\x2c\x9d\x9d\xf9\x96\xb4\x9d\x1d\x82\x78\x3c\xc9\x51\x0f\xb1\xbd\x64\xfa\xd9\xcc\x77\x27\xd3\xe9\x34\x49\xe9\x67\x29\x86\x92\xaa\x87\x6d\x8a\x69\xc9\xb6\xb0\xb0\x05\xb7\x92\xd9\x84\x9e\xcd\xc0\x08\x69\x82\x4d\xd5\x43\xd4\xa1\x20\x57\x97\x9f\xc2\x40\x3b\xd2\x3d\xc9\xef\x28\x4f\x0b\x0c\x69\xc9\x88\x86\x96\x68\x8c\xeb\xf4\x8c\xa5\x7b\x39\xaf\x70\xc0\x78\x73\x7d\x7b\x48\x9f\x85\xa4\x01\xe3\xfc\xd3\xf9\xbb\x23\x74\x5a\xb4\xeb\x73\x5f\x5c\xbe\xbf\xfc\x74\x79\x04\xbb\x05\xb6\x28\x72\xa8\xbc\xbb\xc0\x74\xc2\x1d\xd0\x9b\xbd\xa6\x77\x34\x39\xd6\xfb\x12\x13\x64\xdf\x50\x3a\x8a\x8f\xcd\x4f\x4f\x04\x2d\xd9\xad\x05\x43\x5d\xf3\x52\x43\x7b\x53\x47\xc1\xbc\x64\x81\x4f\x6b\x66\xba\x85\xc2\x55\x4b\x1b\x24\xc4\x82\x17\x09\xbc\xfa\xb3\x16\x18\x1c\xee\xea\xa8\xeb\x21\xf4\x4e\x7d\xe4\x7c\x6b\x7a\xcf\x80\xcb\x2e\x6f\xa9\x6e\x1f\x59\x69\xb3\x34\xaf\x94\xb8\x4c\x73\x6c\x3b\x75\xb3\x6f\xf3\x30\xdc\xdf\x67\x9c\xd3\xbe\x63\xea\xb8\x61\x25\x82\x3e\x2e\xe1\x03\x16\x25\xf4\x7b\x4f\x0c\x49\x4b\xd6\xed\x0d\x96\x7f\xb3\xd1\x88\xf0\x40\xd7\xda\xa0\xb5\x4e\x6a\x5d\xc7\x80\xe6\x47\x87\xdc\xec\x6f\x36\xee\xc8\x46\x3d\x33\xe6\x99\xb6\x71\x9f\x1d\x4c\xa7\xa8\x6b\xc1\xb3\x75\xdb\x70\x1e\x0c\x41\xd5\x92\x75\x0d\xb0\xfc\xd7\xfc\xf9\x51\x70\x89\xfd\x53\xa2\xa0\xa1\xe8\x60\x0c\x8a\x86\xa8\xab\xfc\xef\x15\xca\xa7\xae\xa8\x0b\xaa\xe8\x41\x1f\xf4\xe8\xd8\x95\x14\xb5\xd3\x97\x37\xee\x5b\xe4\x78\x83\x99\x90\xfb\xed\x1b\x09\x4c\x6b\xd6\x15\x1e\x76\x30\xc7\x03\xfe\xb9\x33\xd6\x8c\x3c\xfd\x63\x76\xf8\xca\x36\x40\x8d\xf6\x2c\xba\xde\x75\xd2\x27\xd9\xcc\x4b\x76\xd6\xbd\x13\x1a\xc1\x51\x3d\x30\x29\x4c\xb4\x86\x96\x5b\x47\xd4\xcc\xaf\xa3\xfe\xfa\x1d\x59\x13\x90\x8f\xb8\x16\x95\x4c\xf0\x86\xe6\x18\x9a\x38\xad\x15\x95\x66\x24\x8e\x61\xcd\xfe\x83\x60\x3a\x61\xe8\x25\x29\x06\xaf\x39\x6e\x27\x17\x1d\xc3\xb3\x59\x0f\x5a\xeb\x9a\x98\x48\x86\xdd\x9b\x19\xcb\x20\x21\x16\x9f\xc8\xb6\x0a\x07\xf7\xd4\xed\xd4\xd0\x27\x35\xae\xc5\x46\x65\x57\x6e\x77\xc0\x4d\x0a\xc1\xed\xe9\x35\x13\x50\x89\xe4\x5c\xaf\x84\xd1\x64\x68\xb9\x23\xb8\xce\xb2\x35\x2a\x1b\x82\x88\xbc\x67\x2b\xa6\x42\x1d\x84\x9e\xf9\xa6\x90\x1b\xa1\xf3\xa2\xf8\x97\xb1\x88\xcc\xcb\xf2\x5c\x70\x85\x3f\x54\x4f\xc5\x37\x2a\x21\xd5\xc7\xc3\x8b\x22\xcc\xac\x9c\xbd\x81\x31\x67\x6a\x67\x60\x8c\xc8\xd9\x90\xc3\xc5\xc7\x88\xdf\x17\x20\x57\x7d\x5a\x4c\xdc\x46\x8b\x9c\x8b\x8a\xab\x11\x97\xb6\x42\x86\xe7\x62\xac\x08\xdd\xad\xe6\x60\x19\x56\x92\x99\x5b\xc1\xa0\x51\xe9\xcf\x22\x05\x8b\x73\xaf\x38\x59\x5c\x90\xc5\xda\xbc\xad\xd4\xb5\x9d\xd7\x34\xa8\x15\x6b\x07\x86\x96\xe2\x93\x6e\x85\xfa\x77\x33\x24\xc2\x1f\x95\x64\x67\x01\x4b\x83\x3f\x5a\x0f\x3c\xa4\x31\x6e\x2e\xf8\x3f\x68\xc1\xd2\x37\x8c\xa7\x77\x92\x85\x95\x64\x5e\x06\x99\x1b\x12\x06\xa5\x7d\x85\xc3\x30\xc5\x66\x3e\x1d\x1a\xec\x9e\x8a\x2a\xc9\xc8\x22\x8d\x5a\xc3\xed\x42\x6b\x6e\x34\x19\xab\x85\x0e\x1c\x8e\xd6\xc3\x28\xa9\x57\x08\xfd\x29\x1a\x06\x63\x50\x5d\x3b\xde\x6b\x8e\xa1\x61\x21\x97\x3f\x30\xd9\x53\x08\x1d\x00\x71\xe9\x3e\xae\x36\xdc\x45\xf9\x60\x6d\x2c\x45\xfa\xb4\xbb\x38\x6e\xe8\x53\x21\x68\xda\xed\x76\x47\x25\x39\xd4\x82\xbd\x14\xef\x44\x2f\x67\x68\x34\x76\xb7\x36\x2f\x64\xcd\xd8\xda\xbb\x5c\xeb\xdb\x52\xd2\x7d\xf0\x32\x2f\x24\x3f\x7f\x42\x7f\xd9\x3d\x66\xf4\xaf\x43\x76\xdd\x0c\xc6\xc4\x06\xce\x2c\x40\x5d\xdf\x8f\x40\x81\x41\xa2\x5b\x54\x63\xf4\xc6\x59\xe2\x82\x45\xc6\x28\x76\x81\x44\xff\xaa\xd5\xac\xb1\x0c\x72\x05\xa1\xbe\x47\x6a\xa3\xed\x00\x12\xc1\xef\xfd\xfb\x62\x42\x46\x86\xdb\x4d\xef\x15\x62\x1b\x4f\x74\x93\xbd\x15\xd7\x0b\xa8\x13\xd9\x71\xc5\x10\x1a\x87\xb0\xe7\xd0\x6e\xcc\xdc\x06\x6b\x9e\xa6\x63\x9c\xe1\x91\x1a\x2c\x2a\x71\xa1\xf4\xd6\x1d\x67\xff\xae\x4c\xd2\x08\x19\x19\xb4\x86\x81\x85\xe1\xa3\xc4\xe1\xc8\xfb\x80\xe0\x0d\xf1\xfb\xe1\xa0\x25\xf4\xba\xe6\xf8\xe8\x38\xf4\x7c\xc4\x97\x7a\x88\x8b\xb6\xf6\xe8\x37\xdc\xd7\x06\x87\xc6\xdb\xa1\xf7\x18\xeb\x0d\xa5\x87\x65\x2f\x63\x7e\x07\xbd\xc2\x16\x23\x0f\x61\x97\x7b\x01\x3c\xb6\xaf\xfd\x42\x6d\xed\xa4\xdb\xd7\x9e\x0b\xae\xbf\x40\x83\x34\x9a\x67\x63\x25\xe4\xfb\x1f\x06\xd2\xa5\x39\x88\x21\xd0\x67\x36\x13\x15\x4f\x03\xaf\x2c\xac\xb6\xf1\x91\x56\x2b\x71\x2f\x21\xbd\x39\xf6\xc8\x66\x00\xfd\x86\x60\x85\x0d\x1a\x82\x5b\x7e\x91\x86\x00\x2f\xdc\x14\x60\x1f\x7e\x0d\xd6\x8f\x69\x10\xd0\x69\x12\xbd\x17\x8e\xa1\x43\xff\x4b\xa3\x80\x17\x6c\x16\xf0\x27\x36\x8c\x61\xd0\x61\xbc\x71\x1c\x9f\x1d\x1f\x87\xbd\x67\x90\xc3\x97\xaf\x96\xf8\x65\x1a\xc9\xd0\x64\x7b\x98\xf7\xb6\x93\xfd\x9e\xec\xe9\x28\x23\xae\xbc\x60\x57\xe9\xfa\x52\x3f\xbb\xc5\x5c\xe1\x11\xd7\xf7\x5f\xbe\xbf\x1c\x7a\x12\x20\xff\x7c\x40\x89\xe1\x00\xe7\x16\x17\xe1\x33\x5b\xc4\xf8\x25\xaa\x79\x0d\xda\x3f\x72\x38\xaa\xd1\x37\x86\x5d\x99\x35\x25\xfb\x96\xc9\xf5\xc8\xb5\xb9\xc9\xf8\xb6\x6c\xda\x6f\xff\x0d\x00\x00\xff\xff\xeb\xf4\xf1\x28\x9a\x21\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8602, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
