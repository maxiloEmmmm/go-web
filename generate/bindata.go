// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xdb\xbe\x11\x7f\x3d\x7f\x8a\xfb\x0b\x41\x20\x19\x2a\xf3\x7f\x1d\xc0\x03\xdc\x24\x4d\x3d\x14\x4d\xd6\x34\xdb\x80\x22\x68\x69\xe9\xa4\xb0\x91\x49\x8d\xa6\xda\x66\xae\xbe\xfb\xc0\x07\x59\xd4\x83\x1f\xd6\x76\x40\xfd\x22\xb1\xc9\x7b\xbe\xe3\xef\x8e\xdc\x6c\x20\xc5\x8c\x71\x84\x20\xa9\x64\x1a\x40\x5d\x4f\x36\x9b\xb3\x29\xcc\xd3\x14\xd4\x23\xc2\x92\xae\x11\x1e\x91\xa6\x28\x21\x13\xd2\xac\xe5\xc8\x51\x52\x85\x29\x64\xac\x40\x98\x9e\x19\x26\x38\x29\x9f\x72\x38\x9f\x59\x96\x13\x72\x21\x78\xc6\x72\x72\x4b\x93\x27\x9a\xa3\x15\x0c\x0a\x57\x65\x41\x15\x42\x60\x65\x06\x70\xa2\x77\x26\x6c\x55\x0a\xa9\x20\x9c\x00\x00\x24\x82\x2b\x9a\x28\x08\x72\xa6\x1e\xab\x25\x49\xc4\xea\x6c\x45\xbf\xb1\x42\x5c\xad\x56\xab\xd5\x59\x2e\x5e\x7c\xc5\xe5\x99\x23\x0b\x0c\x8f\x4f\x9b\x0b\x91\x17\x78\x56\x55\x2c\x1d\xd9\x64\xfc\x45\x2e\x38\x4b\xf4\x37\xbb\x9d\x8b\x8f\x4a\x88\x62\x9f\x3e\xbd\xef\x64\xad\x95\x64\x3c\x5f\x07\x93\x68\x62\xbc\x5e\x89\x14\x0b\xed\x77\x40\xcb\xd2\x04\x70\x92\x55\x3c\x01\xad\x7e\x91\x86\x2c\x05\xcb\x11\x99\x15\x72\x7f\xbf\xb8\x84\x8d\x11\x55\xc5\xf0\x51\x33\x9a\xf5\x5b\x2a\xd7\x18\xb2\x34\x9a\xfc\x45\xa2\xaa\x24\x87\x6a\xd2\x88\xe2\xf8\x75\x5e\xb2\x30\x29\x18\x72\x05\xd3\x0b\xf3\x3f\x06\x51\x2a\x98\xce\x4b\x76\x53\x2a\x26\x78\x64\xbe\x3b\xd1\x62\xf9\x59\x4b\x3e\x9d\x97\x6c\x63\xc9\xcf\xc1\xb2\xd7\x13\x43\xc0\x32\xc3\xfe\xc7\x0c\x38\x2b\x1c\x93\x5b\x2f\x90\x87\xa2\x54\xe4\x15\xc3\x22\x5d\x47\xf0\x57\xf8\xd3\x23\xd0\x1f\x9a\x69\xe1\xf3\x44\xab\xb5\x54\x9b\xba\x47\x40\xee\x50\xd9\x2d\x4f\xd6\x87\xe0\x42\x22\x55\x18\x3c\x44\x1d\x72\xb1\xfc\xec\x28\x88\x25\x80\x19\xd0\x6c\xd2\xd7\xf9\x63\x2a\xef\xcb\x74\xbf\x4a\x4b\x60\x55\x36\xdb\x56\xb6\xfd\xeb\xd2\x21\x96\x9f\x75\x42\xd4\x73\x89\xb0\x0d\xba\xce\x6d\x95\x28\x17\x1f\x2b\x10\x56\xb4\xfc\x60\x73\xfe\xf0\xe1\xc1\x7e\xf1\x39\x47\x79\x3a\x6b\xfa\xe3\x02\xe1\x7b\xbc\xdd\x73\x16\x0f\xf6\xac\xbd\x17\x9d\x32\x69\x35\x7b\xd4\x5d\x75\xaf\xe9\x1a\x96\x42\x14\x3b\x7c\x30\x5b\x4d\x29\x86\x34\x83\xa9\x2f\x2a\x6a\xa3\x9e\x59\xd6\xc6\xe7\xc8\x89\xa7\x19\xd1\x1a\x66\xa0\x64\x85\xcd\x8a\x53\x33\x83\x15\x7d\xc2\xb0\xa7\x2d\x36\x35\x68\xc5\x45\x36\x6f\x1a\x7b\x3e\xc6\x60\xd6\x74\xf1\x49\xca\x73\x04\xa7\xb1\x8d\xda\x56\xf2\x07\xb3\xf5\xe0\x6b\xad\xb5\x13\xfa\xc4\x72\x91\xe2\x5a\x0b\xc9\x58\xa1\x50\xbe\x15\xa9\xc6\xab\xb7\x66\xb5\x6e\xc2\x75\xc5\xd3\x52\x30\xae\x80\x71\x85\x32\xa3\x09\x3a\x35\x6f\xd8\x5a\x85\x53\x07\x3e\xe4\x9a\xf1\xd7\x58\x94\xd6\x48\x9b\x97\x1d\x9b\x36\xa1\x3b\x36\xaf\x71\x97\xcc\x4b\x2c\x70\x94\xad\x31\xf4\xa2\x92\xe9\xcb\x8a\x15\x1a\xa1\x3b\x69\x9d\x97\x6c\xa4\xae\x36\x9b\x17\x2e\x78\x27\x5c\xc7\xc0\x45\xa3\xee\x9e\x26\x13\x26\xf2\x96\xae\x34\x70\xc3\xb4\xf3\x73\x5e\xb2\x8e\x34\xe4\x69\xc3\x5e\x6f\xeb\xe4\x2d\x7e\xf5\x0c\xeb\x41\x57\x04\x53\xdf\x6a\x6b\x5c\xb2\x34\x88\xe5\x6d\xb8\x13\x7e\xd8\xe2\x64\x49\xb4\xb3\xa4\x6b\xf5\x4c\x1b\xd1\xb7\xdc\x59\x12\x6b\xd8\x8b\x26\x23\x2e\xb8\xd3\x9e\x2c\xdb\x92\x4f\x96\x1d\x7b\xa3\x77\xa2\x52\x18\x96\x12\x33\xf6\xcd\x81\x7b\x0c\x12\x72\xc6\xc9\xc2\xec\xc9\x18\x4a\x96\x3c\x79\x27\x61\xaa\x37\xed\xde\xb5\x14\x55\xe9\x7c\x66\x19\xfc\xe1\xfa\x89\x3e\x23\xb7\x46\x64\x18\x9c\x05\x31\x58\xf1\x91\x97\x39\xa7\x70\xd6\xf4\x2b\x72\x67\x38\xff\x26\x18\xef\xb0\x78\x50\x60\xfa\xb1\x24\x46\x65\xd8\x6c\x9b\x9d\x47\xba\xbe\xd5\x26\x9e\xcf\xac\xa9\xae\x11\x9c\x9e\x9a\xa3\xa7\x97\x0c\xf0\x1f\x99\x00\xed\x47\x23\xf1\xfb\xf7\xad\x81\x0b\x3e\x97\x92\x3e\x1b\x71\x31\xbc\x7f\x2e\xb1\x93\x8e\xa8\xd7\x56\x92\xa5\xb3\x34\x8f\x21\xb0\x94\xed\xf4\x10\xc4\xe3\x69\x8e\x7a\x98\xed\xa5\xd3\xcf\x67\xbe\x3b\x9d\x4e\xa7\x49\x4b\x3f\x4f\x31\x94\x54\x3d\x6e\x93\x4c\x4b\xb6\x05\x86\x2d\xbc\x95\xcc\xa6\xf4\x7c\x06\x46\x48\x13\x6e\xaa\x1e\xa3\x0e\x05\xb9\xbe\x7a\x1f\x06\xda\x91\xee\x59\x7e\x4d\x79\x5a\x60\x48\x4b\x46\x34\xb8\x44\x63\x5c\x67\xe7\x2c\xdd\xcb\x79\x8d\x03\xc6\xdb\x9b\xbb\x43\xfa\x2c\x28\x0d\x18\xe7\xef\x2f\x5e\x1f\xa1\xd3\xe2\x5d\x9f\xfb\xf2\xea\xcd\xd5\xfb\xab\x23\xd8\x2d\xb4\x45\x91\xc3\xe5\xdd\x25\xa6\x13\xee\xa0\xde\xec\x35\xdd\xa3\xc9\xb1\xde\x97\x98\x20\xfb\x82\xd2\x51\xbc\x6b\x7e\x7a\x22\x68\xc9\xee\x2c\x1c\xea\xaa\x97\x1a\xdc\x9b\x3a\x0a\xe6\x25\x0b\x7c\x5a\x33\xd5\x2d\x14\xae\x5a\xda\x20\x21\x16\xbe\x48\xe0\xd5\x9f\xb5\xc0\x20\x71\x57\x47\x5d\x0f\xc1\x77\xea\x63\xe7\x2b\xd3\x7d\x06\x5c\x76\x79\x4b\x75\xf7\xc4\x4a\x9b\xa5\x79\xa5\xc4\x55\x9a\x63\xdb\xab\x9b\x7d\x9b\x87\xe1\xfe\x3e\xe3\x9c\xf6\x1d\x73\xc7\x2d\x2b\x11\xf4\x71\x09\x1f\xb1\x28\xa1\xdf\x7d\x62\x48\x5a\xb2\x6e\x77\xb0\xfc\x9b\x8d\xc6\x84\x47\xba\xd6\x06\xad\x75\x52\xeb\x3a\x06\x34\x3f\x3a\xe4\x66\x7f\xb3\x71\x47\x36\xea\x99\x31\xcf\xb4\x8d\xfb\xec\x60\x3a\x45\x5d\x0b\x7e\x5a\xb7\x0d\xe7\xc1\x10\x88\x22\xed\x69\x8e\xa1\x6a\x59\xbb\x5b\x56\xe6\x0d\xff\xf9\xc8\xb8\x64\x1f\x8c\xcc\x98\x79\xff\x8f\x68\x69\xc8\x3a\x18\xab\xa2\x21\xea\x2a\xff\x7b\x85\xf2\xb9\x2b\xea\x92\x2a\x7a\x30\xe3\x7a\xc8\x9c\xf6\x7a\xc9\x76\x4e\xf3\x2e\x06\x16\x61\x5e\x62\x26\xe4\x7e\xfb\x46\x02\xd3\x9a\x75\x8d\x87\x1d\xcc\xf1\x08\xff\xae\xf1\x38\xf7\x46\x2d\x71\x87\xb9\x99\xae\xfa\xe7\xf9\xf0\xed\x70\x00\x4f\xed\xa1\x77\x4d\xf2\xb4\x4f\xb2\x99\x97\xec\xbc\x7b\xfd\x34\x82\xa3\x7a\x60\x52\x98\x68\x0d\x2d\xb7\x4e\x89\x19\x95\x47\xfd\xf4\x5b\xbf\x26\x20\xef\x70\x2d\x2a\x99\xe0\x2d\xcd\x31\x34\xf1\x59\x2b\x2a\xcd\xf4\x1d\xc3\x9a\xfd\x07\xc1\xb4\xdc\xd0\xcb\x72\x0c\x5e\x17\xde\x0e\x49\x3a\x09\xe7\xb3\x1e\x86\xd7\x35\x31\xa9\x08\xbb\x97\x40\x96\x41\x42\x2c\x10\x92\x6d\x19\x0f\xae\xc4\xcd\x67\x40\x6a\x5c\x8b\x8d\xca\xae\xdc\xee\x2c\x9d\x14\x82\x5b\x48\x30\xc3\x56\x89\xe4\x42\xaf\x84\xd1\x64\x68\xb9\x23\xb8\xc9\xb2\x35\x2a\x1b\x82\x88\xbc\x61\x2b\xa6\x42\x1d\x84\x9e\xf9\xe6\x24\x34\x42\xe7\x45\xf1\x2f\x63\x11\x99\x97\xe5\x85\xe0\x0a\xbf\xa9\x9e\x8a\x2f\x54\x42\xaa\x0b\xd0\x8b\x22\xcc\xac\x9c\xbd\x81\x31\x55\xbb\x33\x30\x46\xe4\x6c\xc8\xe1\xe2\x63\xc4\xef\x0b\x90\xab\x3e\x2d\x26\x6e\xa3\x45\x2e\x44\xc5\xd5\x88\x4b\x5b\x21\xc3\x73\x31\x56\x84\xee\x02\x75\xb0\x0c\x2b\xc9\xcc\x05\x64\xd0\x11\xf5\x67\x91\x82\x05\xca\x13\x4e\x16\x97\x64\xb1\x36\xcf\x38\x75\x6d\x07\x43\x8d\x8a\xc5\xda\xa1\xa9\xa5\xd0\xc3\xae\xf9\xdd\x4c\xa3\xf0\xa9\x92\xec\x3c\x60\x69\xf0\xa9\xf5\xc0\x83\x2a\xe3\xe6\x82\xff\x83\x16\x2c\x7d\xc9\x78\x7a\x2f\x59\x58\x49\xe6\x65\x90\xb9\x69\x64\x50\xda\xd7\x38\x0c\x53\x6c\x06\xe1\xa1\xc1\xee\x55\xaa\x92\x8c\x2c\xd2\xa8\x35\xdc\x2e\xb4\xe6\x46\x93\xb1\x5a\xe8\xe0\xe9\x68\x3d\x8c\x92\x7a\x85\xd0\x1f\xd7\x61\x30\x6f\xd5\xb5\xe3\xbd\xe1\x18\x1a\x16\x72\xf5\x0d\x93\x3d\x85\xd0\x01\x10\x97\xee\xe3\x6a\xc3\xdd\xc9\x0f\xd6\xc6\x52\xa4\xcf\xa6\x38\xba\xad\x73\x77\xf6\x42\xcd\xe1\xe5\x6e\x27\x2c\x39\x0b\xa2\xb1\xfb\xb9\x79\x65\x6b\x06\xdf\xde\x05\x5d\xdf\xb8\x92\xee\xa3\x99\x79\x65\xf9\xfe\x1d\xfa\xcb\xee\x41\xa4\x7f\xa1\xb2\xeb\x66\xb4\x26\x36\x22\x66\x01\xea\xfa\x61\xe4\x8c\x1b\x88\xb9\x43\x35\x46\x6f\x9c\x25\x63\x3b\xbb\x4e\x7d\xff\x92\xd6\xac\xb1\x0c\x72\x05\xa1\xbe\x83\x6a\x63\xed\x48\x12\xc1\x9f\xfd\xbb\x66\x42\x46\xc6\xe2\x4d\xef\x05\x63\x1b\x47\x74\x77\x02\x2b\xae\x17\x48\x27\xd2\xb8\x60\x08\x8c\x23\xd8\x73\x64\x37\xf8\x6d\x83\xe3\xf0\x01\xc9\x3d\x67\xff\xae\x74\x84\x6d\xb8\xdc\x01\x9b\xa7\xe9\x76\x78\x1a\xd3\x10\x1e\xb0\xc0\x8a\xe7\x42\x75\x54\x10\x42\x46\x46\xb2\x61\xc0\x61\xf8\xd0\x71\x38\x23\xfe\xc9\xf7\xae\x05\xfb\xcf\x7d\x4b\xe8\xb5\xc7\xf1\x21\xb3\xf5\x78\xc4\x87\x7a\x08\x7c\xb6\x06\xe9\x17\xdc\xd7\xe7\x86\x46\xdb\x51\xf9\x18\xab\x0d\xa5\x07\x56\x3f\x67\x76\x07\x96\xc2\x16\xfc\x0e\x81\x92\x7b\x45\x3c\xb6\x61\xfd\x46\xfd\xea\xb4\xdb\xb0\x76\xa2\xe6\x6f\xd0\xd2\x8c\xe6\xd9\x58\x4d\xf8\x8e\x85\x81\x74\xf9\x0b\x62\x08\xf4\xe1\xcb\x44\xc5\xd3\xc0\xcb\xb7\xd5\x36\x3e\x84\x6a\x25\xee\x91\xa4\x37\x79\x1e\x89\xf2\xd0\x47\x7a\x2b\x6c\x80\xf4\x6e\xf9\x97\x20\x3d\xfc\x22\xb4\x87\x7d\x00\x34\x58\x3f\x06\xf9\xa1\x83\xfe\xbd\x47\x8f\xa1\x23\xff\x4b\x07\x80\x5f\xd0\x05\xe0\x37\xee\x04\xc3\x64\xc0\x78\x47\x38\x3e\x6b\x3e\xd0\x7a\x2f\x26\x87\xaf\x4f\x2d\xb1\x07\xb5\x3f\xdc\x27\x86\x06\x27\x95\x94\xc8\xd5\xe2\x88\xae\xb1\xdf\x9f\x3d\x8d\x63\xc4\xa1\x7e\xf3\x88\x7d\x43\x7e\xd8\xb1\xc1\x85\x4f\x5f\xb4\x5a\xb9\x23\x9d\xfc\x47\xdb\xce\x35\x1e\x71\x57\xff\xed\x7b\xce\xa1\xfb\x3f\xf9\xe7\x23\x4a\x0c\x07\x10\xb9\xb8\x0c\x7f\xb2\xbb\x8c\xdf\x98\x9a\xb7\xa3\xfd\xe3\x87\xa3\x1a\x7d\x50\xd8\x35\x08\xbd\x62\x72\xbd\xef\x7a\xdc\xb3\x62\xe7\x15\xbe\x29\xaa\x1e\xed\xd8\x9d\xed\xa8\xe1\x66\x5b\xca\xed\xb7\xff\x06\x00\x00\xff\xff\x89\x66\x4f\x06\x66\x22\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8806, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
