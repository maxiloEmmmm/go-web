// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xed\x6f\xdb\xbc\x11\xff\x3c\xff\x15\xf7\x08\x45\x20\x19\x2a\xf3\x7c\x0e\xe0\x01\x6e\x92\xa6\x1e\x8a\x26\x6b\x9a\x6d\x40\x11\xf4\xa1\xa5\x93\xc2\x46\x26\x35\x9a\x6a\x9b\xb9\xfa\xdf\x07\xbe\xc8\xa2\x5e\xfc\xb2\x25\xc0\x3a\x7f\x48\x6c\xf2\xde\xef\xf8\xbb\x23\x37\x1b\x48\x31\x63\x1c\x21\x48\x2a\x99\x06\x50\xd7\x93\xcd\xe6\x74\x0a\xf3\x34\x05\xf5\x80\xb0\xa4\x6b\x84\x07\xa4\x29\x4a\xc8\x84\x34\x6b\x39\x72\x94\x54\x61\x0a\x19\x2b\x10\xa6\xa7\x86\x09\x5e\x95\x8f\x39\x9c\xcd\x2c\xcb\x2b\x72\x2e\x78\xc6\x72\x72\x43\x93\x47\x9a\xa3\x15\x0c\x0a\x57\x65\x41\x15\x42\x60\x65\x06\xf0\x4a\xef\x4c\xd8\xaa\x14\x52\x41\x38\x01\x00\x48\x04\x57\x34\x51\x10\xe4\x4c\x3d\x54\x4b\x92\x88\xd5\xe9\x8a\xfe\x60\x85\xb8\x5c\xad\x56\xab\xd3\x5c\xbc\xfe\x8e\xcb\x53\x47\x16\x18\x1e\x9f\x36\x17\x22\x2f\xf0\xb4\xaa\x58\x3a\xb2\xc9\xf8\xeb\x5c\x70\x96\xe8\x6f\x76\x3b\x17\x5f\x94\x10\xc5\x3e\x7d\x7a\xdf\xc9\x5a\x2b\xc9\x78\xbe\x0e\x26\xd1\xc4\x78\xbd\x12\x29\x16\xda\xef\x80\x96\xa5\x09\xe0\x24\xab\x78\x02\x5a\xfd\x22\x0d\x59\x0a\x96\x23\x32\x2b\xe4\xee\x6e\x71\x01\x1b\x23\xaa\x8a\xe1\x8b\x66\x34\xeb\x37\x54\xae\x31\x64\x69\x34\xf9\x93\x44\x55\x49\x0e\xd5\xa4\x11\xc5\xf1\xfb\xbc\x64\x61\x52\x30\xe4\x0a\xa6\xe7\xe6\x7f\x0c\xa2\x54\x30\x9d\x97\xec\xba\x54\x4c\xf0\xc8\x7c\x77\xa2\xc5\xf2\xab\x96\x7c\x32\x2f\xd9\xc6\x92\x9f\x81\x65\xaf\x27\x86\x80\x65\x86\xfd\xb7\x19\x70\x56\x38\x26\xb7\x5e\x20\x0f\x45\xa9\xc8\x5b\x86\x45\xba\x8e\xe0\xcf\xf0\xbb\x47\xa0\x3f\x34\xd3\xc2\xe7\x89\x56\x6b\xa9\x36\x75\x8f\x80\xdc\xa2\xb2\x5b\x9e\xac\xcf\xc1\xb9\x44\xaa\x30\xb8\x8f\x3a\xe4\x62\xf9\xd5\x51\x10\x4b\x00\x33\xa0\xd9\xa4\xaf\xf3\xbf\x53\x79\x57\xa6\xfb\x55\x5a\x02\xab\xb2\xd9\xb6\xb2\xed\x5f\x97\x0e\xb1\xfc\xaa\x13\xa2\x9e\x4a\x84\x6d\xd0\x75\x6e\xab\x44\xb9\xf8\x58\x81\xb0\xa2\xe5\x67\x9b\xf3\xfb\xcf\xf7\xf6\x8b\xcf\x39\xca\xd3\x59\xd3\x1f\x17\x08\xdf\xe3\xed\x9e\xb3\x78\xb0\x67\xed\x3d\xef\x94\x49\xab\xd9\xa3\xee\xaa\x7b\x47\xd7\xb0\x14\xa2\xd8\xe1\x83\xd9\x6a\x4a\x31\xa4\x19\x4c\x7d\x51\x51\x1b\xf5\xcc\xb2\x36\x3e\x47\x4e\x3c\xcd\x88\xd6\x30\x03\x25\x2b\x6c\x56\x9c\x9a\x19\xac\xe8\x23\x86\x3d\x6d\xb1\xa9\x41\x2b\x2e\xb2\x79\xd3\xd8\xf3\x25\x06\xb3\xa6\x8b\x4f\x52\x9e\x23\x38\x8d\x6d\xd4\xb6\x92\x3f\x9b\xad\x7b\x5f\x6b\xad\x9d\xd0\x27\x96\x8b\x14\xd7\x5a\x48\xc6\x0a\x85\xf2\x83\x48\x35\x5e\x7d\x30\xab\x75\x13\xae\x4b\x9e\x96\x82\x71\x05\x8c\x2b\x94\x19\x4d\xd0\xa9\x79\xcf\xd6\x2a\x9c\x3a\xf0\x21\x57\x8c\xbf\xc3\xa2\xb4\x46\xda\xbc\xec\xd8\xb4\x09\xdd\xb1\x79\x85\xbb\x64\x5e\x60\x81\xa3\x6c\x8d\xa1\xe7\x95\x4c\xdf\x54\xac\xd0\x08\xdd\x49\xeb\xbc\x64\x23\x75\xb5\xd9\xbc\x76\xc1\x7b\xc5\x75\x0c\x5c\x34\xea\xee\x69\x32\x61\x22\x1f\xe8\x4a\x03\x37\x4c\x3b\x3f\xe7\x25\xeb\x48\x43\x9e\x36\xec\xf5\xb6\x4e\x3e\xe0\x77\xcf\xb0\x1e\x74\x45\x30\xf5\xad\xb6\xc6\x25\x4b\x83\x58\xde\x86\x3b\xe1\x87\x2d\x4e\x96\x44\x3b\x4b\xba\x56\xcf\xb4\x11\x7d\xcb\x9d\x25\xb1\x86\xbd\x68\x32\xe2\x82\x3b\xed\xc9\xb2\x2d\xf9\x64\xd9\xb1\x37\xfa\x28\x2a\x85\x61\x29\x31\x63\x3f\x1c\xb8\xc7\x20\x21\x67\x9c\x2c\xcc\x9e\x8c\xa1\x64\xc9\xa3\x77\x12\xa6\x7a\xd3\xee\x5d\x49\x51\x95\xce\x67\x96\xc1\x6f\xae\x9f\xe8\x33\x72\x63\x44\x86\xc1\x69\x10\x83\x15\x1f\x79\x99\x73\x0a\x67\x4d\xbf\x22\xb7\x86\xf3\x2f\x82\xf1\x0e\x8b\x07\x05\xa6\x1f\x4b\x62\x54\x86\xcd\xb6\xd9\x79\xa0\xeb\x1b\x6d\xe2\xd9\xcc\x9a\xea\x1a\xc1\xc9\x89\x39\x7a\x7a\xc9\x00\xff\x91\x09\xd0\x7e\x34\x12\x7f\xfe\xdc\x1a\xb8\xe0\x73\x29\xe9\x93\x11\x17\xc3\xa7\xa7\x12\x3b\xe9\x88\x7a\x6d\x25\x59\x3a\x4b\xf3\x18\x02\x4b\xd9\x4e\x0f\x41\x3c\x9e\xe6\xa8\x87\xd9\x5e\x3a\xfd\x7c\xe6\xbb\xd3\xe9\x74\x9a\xb4\xf4\xf3\x14\x43\x49\xd5\xc3\x36\xc9\xb4\x64\x5b\x60\xd8\xc2\x5b\xc9\x6c\x4a\xcf\x66\x60\x84\x34\xe1\xa6\xea\x21\xea\x50\x90\xab\xcb\x4f\x61\xa0\x1d\xe9\x9e\xe5\x77\x94\xa7\x05\x86\xb4\x64\x44\x83\x4b\x34\xc6\x75\x7a\xc6\xd2\xbd\x9c\x57\x38\x60\xbc\xb9\xbe\x3d\xa4\xcf\x82\xd2\x80\x71\xfe\xe9\xfc\xdd\x11\x3a\x2d\xde\xf5\xb9\x2f\x2e\xdf\x5f\x7e\xba\x3c\x82\xdd\x42\x5b\x14\x39\x5c\xde\x5d\x62\x3a\xe1\x0e\xea\xcd\x5e\xd3\x3d\x9a\x1c\xeb\x7d\x89\x09\xb2\x6f\x28\x1d\xc5\xc7\xe6\xa7\x27\x82\x96\xec\xd6\xc2\xa1\xae\x7a\xa9\xc1\xbd\xa9\xa3\x60\x5e\xb2\xc0\xa7\x35\x53\xdd\x42\xe1\xaa\xa5\x0d\x12\x62\xe1\x8b\x04\x5e\xfd\x59\x0b\x0c\x12\x77\x75\xd4\xf5\x10\x7c\xa7\x3e\x76\xbe\x35\xdd\x67\xc0\x65\x97\xb7\x54\xb7\x8f\xac\xb4\x59\x9a\x57\x4a\x5c\xa6\x39\xb6\xbd\xba\xd9\xb7\x79\x18\xee\xef\x33\xce\x69\xdf\x31\x77\xdc\xb0\x12\x41\x1f\x97\xf0\x01\x8b\x12\xfa\xdd\x27\x86\xa4\x25\xeb\x76\x07\xcb\xbf\xd9\x68\x4c\x78\xa0\x6b\x6d\xd0\x5a\x27\xb5\xae\x63\x40\xf3\xa3\x43\x6e\xf6\x37\x1b\x77\x64\xa3\x9e\x19\xf3\x4c\xdb\xb8\xcf\x0e\xa6\x53\xd4\xb5\xe0\xd9\xba\x6d\x38\x0f\x86\xa0\x6a\xc9\xba\x06\x58\xfe\x6b\xfe\xfc\x28\xb8\xc4\xfe\x4f\xa2\xa0\xa1\xe8\x60\x0c\x8a\x86\xa8\xab\xfc\xaf\x15\xca\xa7\xae\xa8\x0b\xaa\xe8\x41\x1f\xf4\xf0\x38\xed\xf5\x88\xed\xfc\xe5\x0d\xfc\x16\x39\xde\x60\x26\xe4\x7e\xfb\x46\x02\xd3\x9a\x75\x85\x87\x1d\xcc\xf1\x80\x7f\xee\x8c\x35\x43\x4f\xff\x98\x1d\xbe\xb4\x0d\x50\xa3\x3d\x8b\xae\x77\x9d\xf4\x49\x36\xf3\x92\x9d\x75\x6f\x85\x46\x70\x54\x0f\x4c\x0a\x13\xad\xa1\xe5\xd6\x11\x35\x13\xec\xa8\xbf\x7e\x47\xd6\x04\xe4\x23\xae\x45\x25\x13\xbc\xa1\x39\x86\x26\x4e\x6b\x45\xa5\x19\x8a\x63\x58\xb3\x7f\x21\x98\x4e\x18\x7a\x49\x8a\xc1\x6b\x8e\xdb\xd9\x45\xc7\xf0\x6c\xd6\x83\xd6\xba\x26\x26\x92\x61\xf7\x6e\xc6\x32\x48\x88\xc5\x27\xb2\xad\xc2\xc1\x4d\x75\x3b\x35\xf4\x49\x8d\x6b\xb1\x51\xd9\x95\xdb\x1d\x71\x93\x42\x70\x7b\x7a\xcd\x0c\x54\x22\x39\xd7\x2b\x61\x34\x19\x5a\xee\x08\xae\xb3\x6c\x8d\xca\x86\x20\x22\xef\xd9\x8a\xa9\x50\x07\xa1\x67\xbe\x29\xe4\x46\xe8\xbc\x28\xfe\x61\x2c\x22\xf3\xb2\x3c\x17\x5c\xe1\x0f\xd5\x53\xf1\x8d\x4a\x48\xf5\xf1\xf0\xa2\x08\x33\x2b\x67\x6f\x60\xcc\x99\xda\x19\x18\x23\x72\x36\xe4\x70\xf1\x31\xe2\xf7\x05\xc8\x55\x9f\x16\x13\xb7\xd1\x22\xe7\xa2\xe2\x6a\xc4\xa5\xad\x90\xe1\xb9\x18\x2b\x42\x77\xaf\x39\x58\x86\x95\x64\xe6\x5e\x30\x68\x54\xfa\xb3\x48\xc1\xe2\xdc\x2b\x4e\x16\x17\x64\xb1\x36\xaf\x2b\x75\x6d\xe7\x35\x0d\x6a\xc5\xda\x81\xa1\xa5\xd0\x33\xa8\xf9\xdd\x0c\x89\xf0\x47\x25\xd9\x59\xc0\xd2\xe0\x8f\xd6\x03\x0f\x69\x8c\x9b\x0b\xfe\x37\x5a\xb0\xf4\x0d\xe3\xe9\x9d\x64\x61\x25\x99\x97\x41\xe6\x86\x84\x41\x69\x5f\xe1\x30\x4c\xb1\x99\x4f\x87\x06\xbb\xc7\xa2\x4a\x32\xb2\x48\xa3\xd6\x70\xbb\xd0\x9a\x1b\x4d\xc6\x6a\xa1\x03\x87\xa3\xf5\x30\x4a\xea\x15\x42\x7f\x8a\x86\xc1\x18\x54\xd7\x8e\xf7\x9a\x63\x68\x58\xc8\xe5\x0f\x4c\xf6\x14\x42\x07\x40\x5c\xba\x8f\xab\x0d\x77\x55\x3e\x58\x1b\x4b\x91\x3e\xed\x2e\x8e\x1b\xfa\x54\x08\x9a\x76\xbb\xdd\x51\x49\x0e\xb5\x60\x2f\xc5\x3b\xd1\xcb\x19\x1a\x8d\xdd\xae\xcd\x1b\x59\x33\xb6\xf6\xae\xd7\xfa\xbe\x94\x74\x9f\xbc\xcc\x1b\xc9\xcf\x9f\xd0\x5f\x76\xcf\x19\xfd\xeb\x90\x5d\x37\x83\x31\xb1\x81\x33\x0b\x50\xd7\xf7\x23\x50\x60\x90\xe8\x16\xd5\x18\xbd\x71\x96\xb8\x60\x91\x31\x8a\x5d\x20\xd1\xbf\x6a\x35\x6b\x2c\x83\x5c\x41\xa8\x6f\x92\xda\x68\x3b\x80\x44\xf0\x7b\xff\xc6\x98\x90\x91\xe1\x76\xd3\x7b\x87\xd8\xc6\x13\xdd\x64\x6f\xc5\xf5\x02\xea\x44\x76\x5c\x31\x84\xc6\x21\xec\x39\xb4\x1b\x33\xb7\xc1\x72\xb0\x82\xe4\x8e\xb3\x7f\x56\x3a\xe2\x36\x7c\xee\x5c\xce\xd3\x74\x3b\x32\x8d\x69\x08\x8f\xb4\xc4\xaa\xe1\x42\x75\x54\x11\x42\x46\x06\xb2\x61\x02\x60\xf8\x7c\x71\x38\x43\x3e\x70\x78\xc3\xfe\x7e\xd8\x68\x09\xbd\xee\x3a\x3e\x62\x0e\x3d\x1f\xf1\xa5\x1e\xe2\xa7\xad\x51\xfa\x0d\xf7\xb5\xcb\xa1\xf1\x76\x38\x3e\xc6\x7a\x43\xe9\x61\xde\xcb\x98\xdf\x41\xb9\xb0\xc5\xd2\x43\x18\xe7\xde\x0a\x8f\xed\x7f\xbf\x50\xfb\x3b\xe9\xf6\xbf\xe7\x82\xf0\x2f\xd0\x48\x8d\xe6\xd9\x58\x09\xf9\xfe\x87\x81\x74\x69\x0e\x62\x08\xf4\x99\xcd\x44\xc5\xd3\xc0\x2b\x0b\xab\x6d\x7c\xf4\xd5\x4a\xdc\x8b\x49\x6f\xde\x3d\xb2\x69\x40\xbf\x71\x58\x61\x83\xc6\xe1\x96\x5f\xa4\x71\xc0\x0b\x37\x0f\xd8\x87\x5f\x83\xf5\x63\x1a\x09\x74\x9a\x49\xef\x25\x64\xe8\xd0\x7f\xd2\x50\xe0\x05\x9b\x0a\xfc\x1f\x34\x96\x61\x72\x60\xbc\xc1\x1c\x9f\x45\x1f\xaf\xbd\x67\x95\xc3\x97\xb9\x96\xf8\x65\x1a\xce\xd0\x64\x7b\xe8\xf7\xb6\x9d\xfd\x9e\xec\xe9\x3c\x23\xae\xbc\x60\xf7\xe9\xfa\x52\x3f\xbb\x15\x5d\xe1\x11\xcf\x01\xbf\x7c\x1f\x3a\xf4\xc4\x40\xfe\xfe\x80\x12\xc3\x01\x1e\x2e\x2e\xc2\x67\xb6\x92\xf1\x4b\x59\xf3\xba\xb4\x7f\x34\x71\x54\xa3\x6f\x16\xbb\x32\x6b\x4a\xf6\x2d\x93\xeb\x91\x6b\x78\x93\xf1\x6d\xd9\xb4\xdf\xfe\x1d\x00\x00\xff\xff\xc3\x66\x71\xab\xec\x21\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8684, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
