// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\xbe\x15\x7f\x9e\x3f\xc5\xf9\x0b\x41\x20\x19\x2a\xb3\xe7\x00\x1e\xe0\x26\x69\xea\xa1\x68\xb2\xa6\xdd\x06\x14\x41\xff\xb4\x74\xa4\xb0\x95\x49\x81\xa2\xda\x66\xae\xbe\xfb\xc0\x8b\x2c\xea\x62\x3b\x58\x02\xac\x79\x68\x13\x9e\xfb\xed\xc7\x43\x6d\xb7\x90\x62\xc6\x38\x42\x90\xd4\x32\x0d\xa0\x69\x66\xdb\xed\xd9\x1c\x96\x69\x0a\xea\x01\x61\x4d\x2b\x84\x07\xa4\x29\x4a\xc8\x84\x34\x67\x39\x72\x94\x54\x61\x0a\x19\x2b\x10\xe6\x67\x46\x08\x4e\xca\x6f\x39\x9c\x2f\xac\xc8\x09\xb9\x10\x3c\x63\x39\xb9\xa5\xc9\x37\x9a\xa3\x55\x0c\x0a\x37\x65\x41\x15\x42\x60\x75\x06\x70\xa2\x29\x33\xb6\x29\x85\x54\x10\xce\x00\x00\x12\xc1\x15\x4d\x14\x04\x39\x53\x0f\xf5\x9a\x24\x62\x73\xb6\xa1\x3f\x59\x21\xae\x36\x9b\xcd\xe6\x2c\x17\xaf\x7e\xe0\xfa\xcc\xb1\x05\x46\xc6\xe7\xcd\x85\xc8\x0b\x3c\xab\x6b\x96\x4e\x10\x19\x7f\x95\x0b\xce\x12\xfd\x9b\x25\xe7\xe2\x8b\x12\xa2\x38\x64\x4f\xd3\x9d\xae\x4a\x49\xc6\xf3\x2a\x98\x45\x33\x13\xf5\x46\xa4\x58\xe8\xb8\x03\x5a\x96\x26\x81\xb3\xac\xe6\x09\x68\xf3\xab\x34\x64\x29\x58\x89\xc8\x9c\x90\x4f\x9f\x56\x97\xb0\x35\xaa\xea\x18\xbe\x68\x41\x73\x7e\x4b\x65\x85\x21\x4b\xa3\xd9\x5f\x24\xaa\x5a\x72\xa8\x67\xad\x2a\x8e\x3f\x96\x25\x0b\x93\x82\x21\x57\x30\xbf\x30\xff\xc7\x20\x4a\x05\xf3\x65\xc9\x6e\x4a\xc5\x04\x8f\xcc\xef\x4e\xb5\x58\x7f\xd5\x9a\x4f\x97\x25\xdb\x5a\xf6\x73\xb0\xe2\xcd\xcc\x30\xb0\xcc\x88\xff\xb1\x00\xce\x0a\x27\xe4\xce\x0b\xe4\xa1\x28\x15\x79\xc3\xb0\x48\xab\x08\xfe\x06\x7f\xf5\x18\xf4\x0f\xcd\xb4\xf2\x65\xa2\xcd\x5a\xae\x6d\x33\x60\x20\x77\xa8\x2c\xc9\xd3\xf5\x39\xb8\x90\x48\x15\x06\xf7\x51\x8f\x5d\xac\xbf\x3a\x0e\x62\x19\x60\x01\x34\x9b\x0d\x6d\xfe\x6f\x26\x3f\x95\xe9\x61\x93\x96\xc1\x9a\x6c\xc9\x56\xb7\xfd\xd7\x95\x43\xac\xbf\xea\x82\xa8\xc7\x12\x61\x97\x74\x5d\xdb\x3a\x51\x2e\x3f\x56\x21\x6c\x68\xf9\xd9\xd6\xfc\xfe\xf3\xbd\xfd\xc5\x97\x9c\x94\xe9\x9d\xe9\x1f\x97\x08\x3f\xe2\x1d\xcd\x79\x3c\xa2\x59\x7f\x2f\x7a\x6d\xd2\x59\xf6\xb8\xfb\xe6\xde\xd2\x0a\xd6\x42\x14\x7b\x62\x30\xa4\xb6\x15\x43\x9a\xc1\xdc\x57\x15\x75\x59\xcf\xac\x68\x1b\x73\xe4\xd4\xd3\x8c\x68\x0b\x0b\x50\xb2\xc6\xf6\xc4\x99\x59\xc0\x86\x7e\xc3\x70\x60\x2d\x36\x3d\x68\xd5\x45\xb6\x6e\x1a\x7b\xbe\xc4\x60\xce\x74\xf3\x49\xca\x73\x04\x67\xb1\xcb\xda\x4e\xf3\x67\x43\xba\xf7\xad\x36\x3a\x08\x3d\xb1\x5c\xa4\x58\x69\x25\x19\x2b\x14\xca\xf7\x22\xd5\x78\xf5\xde\x9c\x36\x6d\xba\xae\x78\x5a\x0a\xc6\x15\x30\xae\x50\x66\x34\x41\x67\xe6\x1d\xab\x54\x38\x77\xe0\x43\xae\x19\x7f\x8b\x45\x69\x9d\xb4\x75\xd9\x43\xb4\x05\xdd\x43\xbc\xc6\x7d\x3a\x2f\xb1\xc0\x49\xb1\xd6\xd1\x8b\x5a\xa6\xaf\x6b\x56\x68\x84\xee\x95\x75\x59\xb2\x89\xbe\xda\x6e\x5f\xb9\xe4\x9d\x70\x9d\x03\x97\x8d\xa6\x3f\x4d\x26\x4d\xe4\x3d\xdd\x68\xe0\x86\x79\xef\xcf\x65\xc9\x7a\xda\x90\xa7\xad\x78\xb3\xeb\x93\xf7\xf8\xc3\x73\x6c\x00\x5d\x11\xcc\x7d\xaf\xad\x73\xc9\xda\x20\x96\x47\x70\x13\x7e\xdc\xe3\x64\x4d\x74\xb0\xa4\xef\xf5\x42\x3b\x31\xf4\xdc\x79\x12\x6b\xd8\x8b\x66\x13\x21\xb8\x69\x4f\xd6\x5d\xcb\x27\xeb\x9e\xbf\xd1\x07\x51\x2b\x0c\x4b\x89\x19\xfb\xe9\xc0\x3d\x06\x09\x39\xe3\x64\x65\x68\x32\x86\x92\x25\xdf\xbc\x49\x98\x6b\xa2\xa5\x5d\x4b\x51\x97\x2e\x66\x96\xc1\x1f\xee\x3e\xd1\x33\x72\x6b\x54\x86\xc1\x59\x10\x83\x55\x1f\x79\x95\x73\x06\x17\xed\x7d\x45\xee\x8c\xe4\xdf\x05\xe3\x3d\x11\x0f\x0a\xcc\x7d\x2c\x89\x31\x19\xb6\x64\x43\x79\xa0\xd5\xad\x76\xf1\x7c\x61\x5d\x75\x17\xc1\xe9\xa9\x19\x3d\x7d\x64\x80\xff\x89\x05\xd0\x71\xb4\x1a\x7f\xfd\xda\x39\xb8\xe2\x4b\x29\xe9\xa3\x51\x17\x43\xd0\xab\x45\x10\x0d\x2e\x95\x64\xed\xfc\xcc\x77\xac\xdd\xee\x10\xc4\xd3\x45\x8e\x06\x88\xed\x15\xd3\xaf\x66\xbe\xbf\x98\xce\xa6\x29\xca\xb0\x4a\x31\x94\x54\x3d\xec\x4a\x4c\x4b\xb6\x83\x85\x1d\xb8\x95\xcc\x16\xf4\x7c\x01\x46\x49\x9b\x6c\xaa\x1e\xa2\x1e\x07\xb9\xbe\xfa\x18\x06\x3a\x90\xfe\x24\xbf\xa5\x3c\x2d\x30\xa4\x25\x23\x1a\x5a\xa2\x29\xa9\xb3\x73\x96\x1e\x94\xbc\xc6\x91\xe0\xed\xcd\xdd\x31\x7b\x16\x92\x46\x82\xcb\x8f\x17\x6f\x9f\x60\xd3\xa2\xdd\x50\xfa\xf2\xea\xdd\xd5\xc7\xab\x27\x88\x5b\x60\x8b\x22\x87\xca\xfb\x1b\x4c\x17\xdc\x01\xbd\xa1\xb5\x77\x47\x5b\x63\x4d\x97\x98\x20\xfb\x8e\xd2\x71\x7c\x68\xff\xf4\x54\xd0\x92\xdd\x59\x30\xd4\x3d\x2f\x35\xb4\xb7\x7d\x14\x2c\x4b\x16\xf8\xbc\x66\xa7\x5b\x29\xdc\x74\xbc\x41\x42\x2c\x78\x91\xc0\xeb\x3f\xeb\x81\xc1\xe1\xbe\x8d\xa6\x19\x43\xef\xdc\x47\xce\x37\xe6\xee\x19\x49\xd9\x63\x37\xc2\xfb\x95\x3b\xe9\x3d\x5b\xc3\x2d\x2b\x11\x74\xbb\x87\x0f\x58\x94\x30\xbc\x3b\x62\x48\x3a\xb6\x3e\xb6\x5b\xf9\xed\x56\x4f\xf4\x03\xad\xae\xd2\x1c\x2b\x5d\x94\xa6\x89\x01\xcd\x1f\x3d\x76\x43\xdf\x6e\xdd\xc8\x45\x03\x37\x96\x99\xf6\xf1\x90\x1f\x4c\xa7\xb8\xef\xc1\xb3\x6d\xdb\xb6\x3c\x9a\x82\xba\x63\xeb\x3b\x60\xe5\x6f\xf8\xf3\xb3\x60\x35\xfd\x7f\xb2\xa0\xa1\xe4\x68\x0e\x8a\x96\xa9\x6f\xfc\x1f\x35\xca\xc7\xbe\xaa\x4b\xaa\xe8\xd1\x18\xf4\xea\xd7\xd7\x14\x75\xdb\x93\xb7\xae\xdb\xc9\x7f\x8d\x99\x90\x87\xfd\x9b\x48\x4c\xe7\xd6\x35\x1e\x0f\x30\xc7\x23\xf1\xb9\x19\x6b\x57\x96\xe1\x98\x1d\x7f\x72\x8d\xa6\xbe\x9b\x45\x77\xf7\x9c\x0e\x59\xb6\xcb\x92\x9d\xf7\xdf\x74\x46\x71\xd4\x8c\x5c\x0a\x13\x6d\xa1\x93\xd6\x19\x35\xfb\xe7\x64\xbc\xfe\x8d\xaa\x19\xc8\x07\xac\x44\x2d\x13\xbc\xa5\x39\x86\x26\x4f\x95\xa2\xd2\xac\xb4\x31\x54\xec\x3f\x08\xe6\x26\x0b\xbd\x22\xc5\xe0\x5d\x6e\xbb\xcd\x43\xe7\xf0\x7c\x31\x80\xc6\xa6\x21\x26\x93\x61\xff\x65\xc5\x32\x48\x88\xc5\x27\xb2\xeb\xc2\xd1\x3b\x73\x77\xeb\x0f\x59\x4d\x68\xb1\x31\xd9\xd7\xdb\x5f\x50\x93\x42\x70\x3b\xbd\x66\x83\x29\x91\x5c\xe8\x93\x30\x9a\x8d\x3d\x77\x0c\x37\x59\x56\xa1\xb2\x29\x88\xc8\x3b\xb6\x61\x2a\xd4\x49\x18\xb8\x6f\x1a\xb9\x55\xba\x2c\x8a\x7f\x1b\x8f\xc8\xb2\x2c\x2f\x04\x57\xf8\x53\x0d\x4c\x7c\xa7\x12\x52\x3d\x1e\x5e\x16\x61\x61\xf5\x1c\x4c\x8c\x99\xa9\xbd\x89\x31\x2a\x17\x63\x09\x97\x1f\xa3\xfe\x50\x82\x5c\xf7\x69\x35\x71\x97\x2d\x72\x21\x6a\xae\x26\x42\xda\x29\x19\xcf\xc5\x54\x13\xba\x57\xc9\xd1\x36\xac\x25\x33\x5b\xfd\xe8\xa2\xd2\x3f\xab\x14\x2c\xce\x9d\x70\xb2\xba\x24\xab\xca\x7c\x1b\x69\x1a\xbb\x6f\x69\x50\x2b\x2a\x07\x86\x96\xe3\xa3\xbe\x0a\xf5\xdf\xed\x92\x07\x7f\xd6\x92\x9d\x07\x2c\x0d\xfe\xec\x22\xf0\x90\xc6\x84\xb9\xe2\xff\xa4\x05\x4b\x5f\x33\x9e\x7e\x92\x2c\xac\x25\xf3\x2a\xc8\xdc\x25\x3f\x6a\xed\x6b\x1c\xa7\x29\x36\xfb\xe5\xd8\x61\xf7\xa9\xa7\x96\x8c\xac\xd2\xa8\x73\xdc\x1e\x74\xee\x46\xb3\xa9\x5e\xe8\xc1\xe1\x64\x3f\x4c\xb2\x7a\x8d\x30\xdc\x82\x61\xb4\xc6\x34\x8d\x93\xbd\xe1\x18\x1a\x11\x72\xf5\x13\x93\x03\x8d\xd0\x03\x10\x57\xee\xa7\xf5\x86\x7b\xe8\x1e\xed\x8d\xb5\x48\x1f\xf7\x37\xc7\x2d\x7d\x2c\x04\x4d\xfb\xb7\xdd\x93\x8a\x1c\x6a\xc5\x5e\x89\xf7\xa2\x97\x73\x34\x9a\x7a\x1b\x9b\x2f\x5c\xed\xda\x39\x78\x1c\xeb\xd7\x4e\xd2\xff\x60\x65\xbe\x70\xfc\xfa\x05\xc3\x63\xf7\x31\x62\xf8\x9c\xb1\xe7\x66\xb1\x25\x36\x71\xe6\x00\x9a\xe6\x7e\x02\x0a\x0c\x12\xdd\xa1\x9a\xe2\x37\xc1\x12\x97\x2c\x32\xc5\xb1\x0f\x24\x86\x4f\xa5\x61\x5b\x7a\xab\xe4\xe1\xa6\xec\x18\x3d\xec\x9e\x5e\x60\x7a\xce\xee\x5b\x5d\x9a\xf1\x74\xda\x0c\xd0\xef\x78\x08\x8c\xc7\xce\xdb\xd5\xeb\x29\xde\x1b\x4e\x6f\xa2\x5e\xc6\xfd\xde\x0c\x85\xdd\xa4\x1e\x9b\x20\xf7\x1d\xe9\xa9\xe8\xfa\x1b\x81\xeb\x69\x1f\x5d\x9f\x3b\xe2\xbf\x01\x4c\x1b\xcb\x8b\xa9\x16\xf2\xe3\x0f\x03\xe9\xca\x1c\xc4\x10\x70\xa1\x20\x13\x35\x4f\x03\xaf\x2d\xac\xb5\xe9\xc5\x4a\x1b\x71\xef\xe9\xc1\x36\xf5\x44\x48\x82\x21\x2c\x59\x65\x23\x58\x72\xc7\x2f\x02\x4b\xf0\xc2\xd0\x04\xa3\x1d\x66\xf0\x69\xce\x0b\x74\x37\xbe\xde\x6b\xef\xf8\x8e\xd9\x31\xbf\x0c\x52\x8d\x3d\xb6\xdd\x72\x10\xaf\x0e\x47\x72\x00\xb2\x26\x42\x79\x41\xd8\xea\xc7\xd2\x3c\x1b\xc3\xae\xf1\x09\xaf\x94\xdf\x1e\xc0\x8e\xbd\x7c\xc8\xbf\x1e\x50\x62\x38\x1a\xa4\xd5\x65\xf8\x4c\x0c\x9a\xde\x15\xdb\x47\xef\xe1\x3b\xcd\x71\x4d\x3e\xa5\xf6\x55\xd6\xb4\xec\x1b\x26\xab\x89\xd7\x41\x5b\xf1\x5d\xdb\x74\xbf\xfd\x37\x00\x00\xff\xff\x91\xba\xaa\xd1\x41\x1e\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 7745, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
