// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\x3a\x12\x7e\x5e\xff\x8a\x39\x42\x11\x48\x86\xca\x9c\xe7\x00\x5e\xc0\x4d\xd2\xd4\x8b\xa2\xc9\x36\xcd\xee\x02\x45\xd0\x43\x4b\x23\x85\x8d\x4c\x6a\x69\xaa\x6d\xd6\xd5\x7f\x5f\xf0\x22\x8b\xba\xf8\xb2\x9b\x00\xa7\x7e\x48\x6c\x72\xee\x33\xfc\x66\xc8\xcd\x06\x52\xcc\x18\x47\x08\x92\x4a\xa6\x01\xd4\xf5\x64\xb3\x39\x9d\xc2\x3c\x4d\x41\x3d\x20\x2c\xe9\x1a\xe1\x01\x69\x8a\x12\x32\x21\xcd\x5a\x8e\x1c\x25\x55\x98\x42\xc6\x0a\x84\xe9\xa9\x61\x82\x57\xe5\x63\x0e\x67\x33\xcb\xf2\x8a\x9c\x0b\x9e\xb1\x9c\xdc\xd0\xe4\x91\xe6\x68\x05\x83\xc2\x55\x59\x50\x85\x10\x58\x99\x01\xbc\xd2\x3b\x13\xb6\x2a\x85\x54\x10\x4e\x00\x00\x12\xc1\x15\x4d\x14\x04\x39\x53\x0f\xd5\x92\x24\x62\x75\xba\xa2\x3f\x58\x21\x2e\x57\xab\xd5\xea\x34\x17\xaf\xbf\xe3\xf2\xd4\x91\x05\x86\xc7\xa7\xcd\x85\xc8\x0b\x3c\xad\x2a\x96\x8e\x6c\x32\xfe\x3a\x17\x9c\x25\xfa\x9b\xdd\xce\xc5\x17\x25\x44\xb1\x4f\x9f\xde\x77\xb2\xd6\x4a\x32\x9e\xaf\x83\x49\x34\x31\x5e\xaf\x44\x8a\x85\xf6\x3b\xa0\x65\x69\x02\x38\xc9\x2a\x9e\x80\x56\xbf\x48\x43\x96\x82\xe5\x88\xcc\x0a\xb9\xbb\x5b\x5c\xc0\xc6\x88\xaa\x62\xf8\xa2\x19\xcd\xfa\x0d\x95\x6b\x0c\x59\x1a\x4d\xfe\x22\x51\x55\x92\x43\x35\x69\x44\x71\xfc\x3e\x2f\x59\x98\x14\x0c\xb9\x82\xe9\xb9\xf9\x1f\x83\x28\x15\x4c\xe7\x25\xbb\x2e\x15\x13\x3c\x32\xdf\x9d\x68\xb1\xfc\xaa\x25\x9f\xcc\x4b\xb6\xb1\xe4\x67\x60\xd9\xeb\x89\x21\x60\x99\x61\xff\x6d\x06\x9c\x15\x8e\xc9\xad\x17\xc8\x43\x51\x2a\xf2\x96\x61\x91\xae\x23\xf8\x2b\xfc\xee\x11\xe8\x0f\xcd\xb4\xf0\x79\xa2\xd5\x5a\xaa\x4d\xdd\x23\x20\xb7\xa8\xec\x96\x27\xeb\x73\x70\x2e\x91\x2a\x0c\xee\xa3\x0e\xb9\x58\x7e\x75\x14\xc4\x12\xc0\x0c\x68\x36\xe9\xeb\xfc\xff\x54\xde\x95\xe9\x7e\x95\x96\xc0\xaa\x6c\xb6\xad\x6c\xfb\xd7\xa5\x43\x2c\xbf\xea\x84\xa8\xa7\x12\x61\x1b\x74\x9d\xdb\x2a\x51\x2e\x3e\x56\x20\xac\x68\xf9\xd9\xe6\xfc\xfe\xf3\xbd\xfd\xe2\x73\x8e\xf2\x74\xd6\xf4\xc7\x05\xc2\xf7\x78\xbb\xe7\x2c\x1e\xec\x59\x7b\xcf\x3b\x65\xd2\x6a\xf6\xa8\xbb\xea\xde\xd1\x35\x2c\x85\x28\x76\xf8\x60\xb6\x9a\x52\x0c\x69\x06\x53\x5f\x54\xd4\x46\x3d\xb3\xac\x8d\xcf\x91\x13\x4f\x33\xa2\x35\xcc\x40\xc9\x0a\x9b\x15\xa7\x66\x06\x2b\xfa\x88\x61\x4f\x5b\x6c\x6a\xd0\x8a\x8b\x6c\xde\x34\xf6\x7c\x89\xc1\xac\xe9\xe2\x93\x94\xe7\x08\x4e\x63\x1b\xb5\xad\xe4\xcf\x66\xeb\xde\xd7\x5a\x6b\x27\xf4\x89\xe5\x22\xc5\xb5\x16\x92\xb1\x42\xa1\xfc\x20\x52\x8d\x57\x1f\xcc\x6a\xdd\x84\xeb\x92\xa7\xa5\x60\x5c\x01\xe3\x0a\x65\x46\x13\x74\x6a\xde\xb3\xb5\x0a\xa7\x0e\x7c\xc8\x15\xe3\xef\xb0\x28\xad\x91\x36\x2f\x3b\x36\x6d\x42\x77\x6c\x5e\xe1\x2e\x99\x17\x58\xe0\x28\x5b\x63\xe8\x79\x25\xd3\x37\x15\x2b\x34\x42\x77\xd2\x3a\x2f\xd9\x48\x5d\x6d\x36\xaf\x5d\xf0\x5e\x71\x1d\x03\x17\x8d\xba\x7b\x9a\x4c\x98\xc8\x07\xba\xd2\xc0\x0d\xd3\xce\xcf\x79\xc9\x3a\xd2\x90\xa7\x0d\x7b\xbd\xad\x93\x0f\xf8\xdd\x33\xac\x07\x5d\x11\x4c\x7d\xab\xad\x71\xc9\xd2\x20\x96\xb7\xe1\x4e\xf8\x61\x8b\x93\x25\xd1\xce\x92\xae\xd5\x33\x6d\x44\xdf\x72\x67\x49\xac\x61\x2f\x9a\x8c\xb8\xe0\x4e\x7b\xb2\x6c\x4b\x3e\x59\x76\xec\x8d\x3e\x8a\x4a\x61\x58\x4a\xcc\xd8\x0f\x07\xee\x31\x48\xc8\x19\x27\x0b\xb3\x27\x63\x28\x59\xf2\xe8\x9d\x84\xa9\xde\xb4\x7b\x57\x52\x54\xa5\xf3\x99\x65\xf0\x9b\xeb\x27\xfa\x8c\xdc\x18\x91\x61\x70\x1a\xc4\x60\xc5\x47\x5e\xe6\x9c\xc2\x59\xd3\xaf\xc8\xad\xe1\xfc\x9b\x60\xbc\xc3\xe2\x41\x81\xe9\xc7\x92\x18\x95\x61\xb3\x6d\x76\x1e\xe8\xfa\x46\x9b\x78\x36\xb3\xa6\xba\x46\x70\x72\x62\x8e\x9e\x5e\x32\xc0\x7f\x64\x02\xb4\x1f\x8d\xc4\x9f\x3f\xb7\x06\x2e\xf8\x5c\x4a\xfa\x64\xc4\xc5\xf0\xe9\xa9\xc4\x4e\x3a\xa2\x5e\x5b\x49\x96\xce\xd2\x3c\x86\xc0\x52\xb6\xd3\x43\x10\x8f\xa7\x39\xea\x61\xb6\x97\x4e\x3f\x9f\xf9\xee\x74\x3a\x9d\x26\x2d\xfd\x3c\xc5\x50\x52\xf5\xb0\x4d\x32\x2d\xd9\x16\x18\xb6\xf0\x56\x32\x9b\xd2\xb3\x19\x18\x21\x4d\xb8\xa9\x7a\x88\x3a\x14\xe4\xea\xf2\x53\x18\x68\x47\xba\x67\xf9\x1d\xe5\x69\x81\x21\x2d\x19\xd1\xe0\x12\x8d\x71\x9d\x9e\xb1\x74\x2f\xe7\x15\x0e\x18\x6f\xae\x6f\x0f\xe9\xb3\xa0\x34\x60\x9c\x7f\x3a\x7f\x77\x84\x4e\x8b\x77\x7d\xee\x8b\xcb\xf7\x97\x9f\x2e\x8f\x60\xb7\xd0\x16\x45\x0e\x97\x77\x97\x98\x4e\xb8\x83\x7a\xb3\xd7\x74\x8f\x26\xc7\x7a\x5f\x62\x82\xec\x1b\x4a\x47\xf1\xb1\xf9\xe9\x89\xa0\x25\xbb\xb5\x70\xa8\xab\x5e\x6a\x70\x6f\xea\x28\x98\x97\x2c\xf0\x69\xcd\x54\xb7\x50\xb8\x6a\x69\x83\x84\x58\xf8\x22\x81\x57\x7f\xd6\x02\x83\xc4\x5d\x1d\x75\x3d\x04\xdf\xa9\x8f\x9d\x6f\x4d\xf7\x19\x70\xd9\xe5\x2d\xd5\xed\x23\x2b\x6d\x96\xe6\x95\x12\x97\x69\x8e\x6d\xaf\x6e\xf6\x6d\x1e\x86\xfb\xfb\x8c\x73\xda\x77\xcc\x1d\x37\xac\x44\xd0\xc7\x25\x7c\xc0\xa2\x84\x7e\xf7\x89\x21\x69\xc9\xba\xdd\xc1\xf2\x6f\x36\x1a\x13\x1e\xe8\x5a\x1b\xb4\xd6\x49\xad\xeb\x18\xd0\xfc\xe8\x90\x9b\xfd\xcd\xc6\x1d\xd9\xa8\x67\xc6\x3c\xd3\x36\xee\xb3\x83\xe9\x14\x75\x2d\x78\xb6\x6e\x1b\xce\x83\x21\xa8\x5a\xb2\xae\x01\x96\xff\x9a\x3f\x3f\x0a\x2e\xb1\x7f\x4a\x14\x34\x14\x1d\x8c\x41\xd1\x10\x75\x95\xff\xbd\x42\xf9\xd4\x15\x75\x41\x15\x3d\xe8\x83\x1e\x1e\xa7\xbd\x1e\xb1\x9d\xbf\xbc\x81\xdf\x22\xc7\x1b\xcc\x84\xdc\x6f\xdf\x48\x60\x5a\xb3\xae\xf0\xb0\x83\x39\x1e\xf0\xcf\x9d\xb1\x66\xe8\xe9\x1f\xb3\xc3\x97\xb6\x01\x6a\xb4\x67\xd1\xf5\xae\x93\x3e\xc9\x66\x5e\xb2\xb3\xee\xad\xd0\x08\x8e\xea\x81\x49\x61\xa2\x35\xb4\xdc\x3a\xa2\x66\x82\x1d\xf5\xd7\xef\xc8\x9a\x80\x7c\xc4\xb5\xa8\x64\x82\x37\x34\xc7\xd0\xc4\x69\xad\xa8\x34\x43\x71\x0c\x6b\xf6\x1f\x04\xd3\x09\x43\x2f\x49\x31\x78\xcd\x71\x3b\xbb\xe8\x18\x9e\xcd\x7a\xd0\x5a\xd7\xc4\x44\x32\xec\xde\xcd\x58\x06\x09\xb1\xf8\x44\xb6\x55\x38\xb8\xa9\x6e\xa7\x86\x3e\xa9\x71\x2d\x36\x2a\xbb\x72\xbb\x23\x6e\x52\x08\x6e\x4f\xaf\x99\x81\x4a\x24\xe7\x7a\x25\x8c\x26\x43\xcb\x1d\xc1\x75\x96\xad\x51\xd9\x10\x44\xe4\x3d\x5b\x31\x15\xea\x20\xf4\xcc\x37\x85\xdc\x08\x9d\x17\xc5\xbf\x8c\x45\x64\x5e\x96\xe7\x82\x2b\xfc\xa1\x7a\x2a\xbe\x51\x09\xa9\x3e\x1e\x5e\x14\x61\x66\xe5\xec\x0d\x8c\x39\x53\x3b\x03\x63\x44\xce\x86\x1c\x2e\x3e\x46\xfc\xbe\x00\xb9\xea\xd3\x62\xe2\x36\x5a\xe4\x5c\x54\x5c\x8d\xb8\xb4\x15\x32\x3c\x17\x63\x45\xe8\xee\x35\x07\xcb\xb0\x92\xcc\xdc\x0b\x06\x8d\x4a\x7f\x16\x29\x58\x9c\x7b\xc5\xc9\xe2\x82\x2c\xd6\xe6\x75\xa5\xae\xed\xbc\xa6\x41\xad\x58\x3b\x30\xb4\x14\x7a\x06\x35\xbf\x9b\x21\x11\xfe\xa8\x24\x3b\x0b\x58\x1a\xfc\xd1\x7a\xe0\x21\x8d\x71\x73\xc1\xff\x41\x0b\x96\xbe\x61\x3c\xbd\x93\x2c\xac\x24\xf3\x32\xc8\xdc\x90\x30\x28\xed\x2b\x1c\x86\x29\x36\xf3\xe9\xd0\x60\xf7\x58\x54\x49\x46\x16\x69\xd4\x1a\x6e\x17\x5a\x73\xa3\xc9\x58\x2d\x74\xe0\x70\xb4\x1e\x46\x49\xbd\x42\xe8\x4f\xd1\x30\x18\x83\xea\xda\xf1\x5e\x73\x0c\x0d\x0b\xb9\xfc\x81\xc9\x9e\x42\xe8\x00\x88\x4b\xf7\x71\xb5\xe1\xae\xca\x07\x6b\x63\x29\xd2\xa7\xdd\xc5\x71\x43\x9f\x0a\x41\xd3\x6e\xb7\x3b\x2a\xc9\xa1\x16\xec\xa5\x78\x27\x7a\x39\x43\xa3\xb1\xdb\xb5\x79\x23\x6b\xc6\xd6\xde\xf5\x5a\xdf\x97\x92\xee\x93\x97\x79\x23\xf9\xf9\x13\xfa\xcb\xee\x39\xa3\x7f\x1d\xb2\xeb\x66\x30\x26\x36\x70\x66\x01\xea\xfa\x7e\x04\x0a\x0c\x12\xdd\xa2\x1a\xa3\x37\xce\x12\x17\x2c\x32\x46\xb1\x0b\x24\xfa\x57\xad\x66\x8d\x65\x90\x2b\x08\xf5\x4d\x52\x1b\x6d\x07\x90\x08\x7e\xef\xdf\x18\x13\x32\x32\xdc\x6e\x7a\xef\x10\xdb\x78\xa2\x9b\xec\xad\xb8\x5e\x40\x9d\xc8\x8e\x2b\x86\xd0\x38\x84\x3d\x87\x76\x63\xe6\x36\x58\xf3\x34\x1d\xe3\x0c\x8f\xd4\x60\x51\x89\x0b\xa5\xb7\xee\x38\xfb\x77\x65\x92\x46\xc8\xc8\xa0\x35\x0c\x2c\x0c\x9f\x25\x0e\x47\xde\x07\x04\x6f\x88\xdf\x0f\x07\x2d\xa1\xd7\x35\xc7\x47\xc7\xa1\xe7\x23\xbe\xd4\x43\x5c\xb4\xb5\x47\xbf\xe1\xbe\x36\x38\x34\xde\x0e\xbd\xc7\x58\x6f\x28\x3d\x2c\x7b\x19\xf3\x3b\xe8\x15\xb6\x18\x79\x08\xbb\xdc\x1b\xe0\xb1\x7d\xed\x17\x6a\x6b\x27\xdd\xbe\xf6\x5c\x70\xfd\x05\x1a\xa4\xd1\x3c\x1b\x2b\x21\xdf\xff\x30\x90\x2e\xcd\x41\x0c\x81\x3e\xb3\x99\xa8\x78\x1a\x78\x65\x61\xb5\x8d\x8f\xb4\x5a\x89\x7b\x09\xe9\xcd\xb1\x47\x36\x03\xe8\x37\x04\x2b\x6c\xd0\x10\xdc\xf2\x8b\x34\x04\x78\xe1\xa6\x00\xfb\xf0\x6b\xb0\x7e\x4c\x83\x80\x4e\x93\xe8\xbd\x70\x0c\x1d\xfa\x5f\x1a\x05\xbc\x60\xb3\x80\x3f\xb1\x61\x0c\x83\x0e\xe3\x8d\xe3\xf8\xec\xf8\x38\xec\x3d\x83\x1c\xbe\x7c\xb5\xc4\x2f\xd3\x48\x86\x26\xdb\xc3\xbc\xb7\x9d\xec\xf7\x64\x4f\x47\x19\x71\xe5\x05\xbb\x4a\xd7\x97\xfa\xd9\x2d\xe6\x0a\x8f\xb8\xbe\xff\xf2\xfd\xe5\xd0\x93\x00\xf9\xe7\x03\x4a\x0c\x07\x38\xb7\xb8\x08\x9f\xd9\x22\xc6\x2f\x51\xcd\x6b\xd0\xfe\x91\xc3\x51\x8d\xbe\x31\xec\xca\xac\x29\xd9\xb7\x4c\xae\x47\xae\xcd\x4d\xc6\xb7\x65\xd3\x7e\xfb\x6f\x00\x00\x00\xff\xff\x67\xcd\x15\x1f\x9c\x21\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8604, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
