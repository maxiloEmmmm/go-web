// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6f\xd3\x48\x17\xbe\x6e\x7e\xc5\xc1\x8a\x90\x1d\x99\x09\x2f\x20\x2e\x22\xe5\x95\xb2\x29\x0b\x91\x10\x74\x61\xbb\x5a\x09\x55\x30\xf1\x1c\xa7\x03\xf6\xcc\x68\x3c\x2e\xed\x06\xff\xf7\xd5\x7c\x38\xb1\x9b\xa4\xcd\xee\x96\x5e\xd4\xce\xf9\x78\xe6\x9c\x67\xce\x87\xd7\x6b\x60\x98\x73\x81\x10\x65\xb5\x66\x11\x34\xcd\x60\xbd\x1e\x8f\x60\xc6\x18\x98\x4b\x84\x25\xad\x10\x2e\x91\x32\xd4\x90\x4b\xed\x64\x2b\x14\xa8\xa9\x41\x06\x39\x2f\x10\x46\x63\xe7\x04\x43\xf5\x6d\x05\x93\xa9\x77\x19\x92\xb9\x14\x39\x5f\x91\x33\x9a\x7d\xa3\x2b\xf4\xc0\x60\xb0\x54\x05\x35\x08\x91\xc7\x8c\x60\x68\x35\x03\x5e\x2a\xa9\x0d\xc4\x03\x00\x80\x4c\x0a\x43\x33\x03\xd1\x8a\x9b\xcb\x7a\x49\x32\x59\x8e\x4b\x7a\xcd\x0b\xf9\xaa\x2c\xcb\x72\xbc\x92\x4f\xbe\xe3\x72\x1c\xcc\x22\xe7\xd3\xb5\x5d\x49\xb9\x2a\x70\x5c\xd7\x9c\x05\x65\x65\x74\x26\xc5\x55\x34\x48\x06\x2e\xd2\x52\x32\x2c\x6c\xac\x11\x55\xca\x25\x3d\xc8\x6b\x91\x41\x65\x34\x17\xab\x05\x8b\x39\x0b\xef\x49\x78\xc2\xda\x21\x69\x34\xb5\x16\xc0\xd9\xa0\x75\xe1\xc2\xf4\xed\xb9\x30\xc1\xf8\x8a\x16\x29\x7c\xb6\xc7\x84\xf3\xc9\xcc\x48\x1e\x73\x96\x74\xb1\xae\x68\xd1\x05\x7b\xfe\x6c\x07\xee\xf9\xb3\x5b\xa7\x5b\x51\xcc\x85\x79\xf9\xc2\xd9\x26\x49\x17\x20\x08\xbb\x00\x2f\x5f\x1c\x8c\xe8\x8c\xea\x0a\x17\xc2\xc4\x9c\xa5\xf0\xbf\xa7\x29\xbc\x7c\x71\x30\x3a\x4b\x68\x1f\xdb\x4a\xc8\xf9\xf9\xe2\x34\xe0\xd7\x01\xdd\xc9\x1d\xb4\xcb\xf6\x24\x80\xd5\x1b\x28\x81\xdf\x67\x8a\xc7\x59\xc1\x51\x18\x18\xcd\xdd\x33\x05\xa9\x0c\x8c\x66\x8a\xbf\x57\x86\x4b\x91\xc0\x4c\xf1\x80\x2c\x97\x5f\x2d\xf0\x4c\xf1\xb5\x37\x9e\x80\x77\x6e\x06\x4e\xcf\x73\xe7\xfc\x68\x0a\x82\x17\xc1\x27\xc8\x0b\x14\xb1\x54\x86\xfc\xca\xb1\x60\x55\x02\xff\x87\xa7\x1d\x03\x57\x70\x1a\xa9\x41\xaf\x4f\xe1\x92\x56\xf6\xa8\xad\xcb\xa7\x68\xee\x0c\xa2\x8b\x9e\x17\xcd\x5d\x44\x99\x0d\xd5\x1b\xf6\x51\xed\xdf\x1b\x5a\x4d\x2c\x60\xda\xd3\x34\xbd\x5f\xb6\xad\x3e\xa7\x90\x5b\x08\x8b\xa8\xa9\x58\x61\x2f\x26\xd8\x05\xa6\x79\x1b\x9c\xf3\xbb\x80\x29\x18\x5d\xe3\x1d\xc7\xc8\xe5\xd7\xe0\x42\x7c\x3a\x30\x05\x9a\x0f\x7a\x36\xb5\x62\x77\x13\x71\xee\x0c\x76\x89\xf8\x79\x3c\x74\x43\x7a\x68\x1e\x7c\x36\x9e\x87\xbe\x71\xd3\xed\x01\xb9\xfc\x6a\x0b\xd7\xdc\x28\x84\x4d\x71\xda\x1e\xa8\xb3\xb6\xd5\x43\x7c\x25\x55\x9f\x7c\x6f\x5c\x7c\xba\xf0\x2f\x5d\xcf\xbd\x3e\x3d\x99\xfd\x0b\xb7\xd3\x25\x74\xa3\x0b\x11\xef\xe8\x7c\xbc\xf3\x5e\x3b\x6d\x4f\xee\x58\xf7\x8f\x7b\x43\x2b\x58\x4a\x59\x1c\xc8\xc1\xa9\x1a\x37\x32\xfd\x65\x0c\x85\xbd\x98\x9c\x17\x06\xf5\x3b\xc9\xec\x98\xb7\x8f\xca\x4e\x50\x0b\x61\x67\x6b\xee\x61\x26\x53\x18\x8a\x40\xb4\x1b\xb0\xad\x5e\x63\x86\xfc\x0a\x75\xb0\xf8\xd0\xfe\xec\x40\x50\xc5\x3f\xfa\x30\x27\x53\x50\xda\x4e\xd4\xa1\x20\xef\x68\x89\x10\xcd\x14\x8f\xba\xb6\x6e\x94\x2f\x0c\x96\x5b\xdb\x28\x23\x9e\x01\x12\x6d\xfc\x3a\x1e\xd5\x7d\xd0\xce\xd2\x31\xd7\x31\x6f\x1a\x7b\x83\x5e\xe7\x46\xd8\x3b\xfc\xde\x53\xdf\x3b\xcc\x46\x7d\xb4\xed\x85\x53\xc5\x6d\x34\x7d\xb4\xde\x84\x74\x60\x49\xb2\xf1\x08\x85\xf9\x98\x2a\x1e\xae\x7f\x1b\x57\x9c\xd9\x93\xb6\x1c\x36\x4d\x02\x6f\x79\x65\xe2\x4b\x2c\x14\x8c\xc2\xd6\x24\xaf\xb9\x78\x83\x85\x4a\x42\x1c\x27\x56\x4b\x3e\x60\x25\x6b\x9d\xe1\x19\x5d\x61\x6c\xd1\xe2\xca\x50\x6d\xec\x0e\x49\xa1\xe2\x7f\xa1\x7d\x4b\xc0\xee\x1e\xd4\x39\xcd\x70\xdd\xa4\x5e\x14\x50\xec\x3f\xc5\x15\xb6\xf9\x6c\x6f\xa7\x69\xc8\x6f\x35\xea\x9b\x38\xd9\x5a\x66\x85\x14\x78\x16\xcc\xad\x1b\x99\x5b\x49\x9c\x0c\x6e\xa1\x05\xed\xfb\x3c\xaf\xd0\xf8\x98\x12\xf2\x96\x97\xdc\xc4\x36\xaa\x0e\x24\xa3\x86\x6e\xd0\x66\x45\xf1\xa7\x4b\x9b\xcc\x94\x9a\x4b\x61\xf0\xda\xb4\xd8\xed\x4e\xb2\x0e\xe9\x36\x12\x32\x97\xb5\x30\x7b\xbc\x9c\x53\x93\x1c\x45\xf7\x29\x56\x46\xcb\x9b\x7b\x18\xaf\xb5\xbb\xf6\xc7\xbd\x8e\x3c\x39\x59\xb4\xeb\x15\xbe\xd4\x9a\x4f\x22\xce\xa2\x2f\xe1\xf4\x75\xd3\xb9\xab\x85\xf8\x83\x16\x9c\xfd\xc2\x05\x3b\xd7\x3c\xae\x35\x6f\x53\xdb\x21\xfe\x14\x0b\x34\xf8\x5e\xe0\xe2\x34\xb6\x4a\x41\x16\xa7\xe4\x77\x5b\xe0\x4d\xb3\x60\xd6\x95\x2c\x58\x92\x90\x57\xd7\x98\x1d\x4a\xbd\x57\x1f\x1e\x30\x3e\x8e\x0d\x3f\xcf\xee\x21\x63\x29\xd9\xcd\x3e\x36\xce\xe8\x4d\x21\x29\x03\x1f\x76\xb7\x95\x0f\xd3\x11\x5b\xb0\x96\x8c\x83\xd5\x18\xc2\x4a\x5a\xce\x9e\xb4\x33\xce\xad\xf5\x76\x8c\x35\xfd\xe5\xc1\x73\x78\x94\xf5\xd7\x28\xb1\x43\xf4\xc7\x0f\xb8\x2d\x6e\x57\xa6\x9b\x89\xc4\xd3\xe1\x64\xd0\x34\xd1\xc5\x9e\x55\xe6\x4a\xf6\x23\x9a\x7d\x0e\x2e\x25\x12\xc8\x20\xfb\x2c\x92\x3d\x2b\xcf\x65\x85\x82\x6d\x28\xf3\x47\xd0\x2b\x3c\xea\x96\xe3\x3b\xcc\x8f\xbb\x7a\xbf\xae\x8e\xeb\x83\x87\x69\x83\xc7\x9d\x3e\xf8\x97\x35\xe5\xdf\x78\x58\x29\x3b\x75\xf3\x1a\x77\xc7\x43\x0a\x77\xb4\x55\xc0\xcb\xc1\x41\x4e\xbb\x5f\xa8\x27\xbd\x1c\xe2\x48\x07\xe6\xa3\x14\x22\x21\x0d\xe4\xb2\x16\x2c\x6a\x87\x0f\x60\x51\xe1\xbe\x49\x6b\x81\xc3\xc7\x4c\xdc\xaf\x83\x23\xcb\x7a\xa7\xb4\x3d\xd8\x4e\x69\x07\xf1\x3f\x2e\xed\x87\x2e\x6f\xd8\xf9\xaa\xbb\x5d\xe9\xdb\x13\xef\xa8\xf6\x66\x5f\xd1\x5b\x32\x8f\xab\xee\xd7\x78\xdf\x52\xfd\x09\xa5\xbd\x27\xe2\xff\x5e\xa2\x6d\xbe\xeb\x75\x4b\xe2\xe6\xed\xef\x00\x00\x00\xff\xff\xd7\x27\x9c\xed\x22\x10\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 4130, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
