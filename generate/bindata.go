// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xd3\xc8\x16\xfe\xdc\xfc\x8a\x83\x55\x21\x3b\x0a\x53\x2e\x20\x3e\x54\xca\x95\x72\x53\x2e\x44\x42\xd0\x0b\xb7\xab\x95\xaa\x0a\x26\x9e\xe3\x74\xc0\x9e\x19\x8d\xc7\x85\x6e\xf0\x7f\x5f\xcd\x5b\x6c\x27\x69\x9b\x65\xd9\x7c\x68\xdc\xf3\xf2\x9c\xb7\xc7\xe7\x64\xbd\x06\x86\x05\x17\x08\x49\xde\x68\x96\x40\xdb\x8e\xd6\xeb\x93\x31\xcc\x18\x03\x73\x8d\xb0\xa4\x35\xc2\x35\x52\x86\x1a\x0a\xa9\x9d\x6c\x85\x02\x35\x35\xc8\xa0\xe0\x25\xc2\xf8\xc4\x39\xc1\xb1\xfa\xba\x82\xd3\xa9\x77\x39\x26\x73\x29\x0a\xbe\x22\xe7\x34\xff\x4a\x57\xe8\x81\xc1\x60\xa5\x4a\x6a\x10\x12\x8f\x99\xc0\xb1\xd5\x8c\x78\xa5\xa4\x36\x90\x8e\x00\x00\x72\x29\x0c\xcd\x0d\x24\x2b\x6e\xae\x9b\x25\xc9\x65\x75\x52\xd1\xef\xbc\x94\xaf\xaa\xaa\xaa\x4e\x56\xf2\xc9\x37\x5c\x9e\x04\xb3\xc4\xf9\xf4\x6d\x57\x52\xae\x4a\x3c\x69\x1a\xce\x82\xb2\x36\x3a\x97\xe2\x26\x19\x65\x23\x97\x69\x25\x19\x96\x36\xd7\x84\x2a\xe5\x8a\x1e\x15\x8d\xc8\xa1\x36\x9a\x8b\xd5\x82\xa5\x9c\x85\xe7\x2c\x7c\xc3\xda\x21\x69\x34\x8d\x16\xc0\xd9\x28\xba\x70\x61\x86\xf6\x5c\x98\x60\x7c\x43\xcb\x09\x7c\xb2\x61\x42\x7c\x32\x33\x92\xa7\x9c\x65\x7d\xac\x1b\x5a\xf6\xc1\x9e\x3f\xdb\x81\x7b\xfe\x6c\x2b\xba\x15\xa5\x5c\x98\x97\x2f\x9c\x6d\x96\xf5\x01\x82\xb0\x0f\xf0\xf2\xc5\x9d\x19\x9d\x53\x5d\xe3\x42\x98\x94\xb3\x09\xfc\xeb\xe9\x04\x5e\xbe\xb8\x33\x3b\xdb\xd0\x21\xb6\x95\x90\x8b\x8b\xc5\x59\xc0\x6f\x02\xba\x93\x3b\x68\x57\xed\x51\x00\x6b\x36\x50\x02\xbf\xcd\x14\x4f\xf3\x92\xa3\x30\x30\x9e\xbb\xef\x09\x48\x65\x60\x3c\x53\xfc\xbd\x32\x5c\x8a\x0c\x66\x8a\x07\x64\xb9\xfc\x62\x81\x67\x8a\xaf\xbd\xf1\x29\x78\xe7\x76\xe4\xf4\xbc\x70\xce\x8f\xa6\x20\x78\x19\x7c\x82\xbc\x44\x91\x4a\x65\xc8\x7f\x39\x96\xac\xce\xe0\xdf\xf0\xb4\x67\x60\x3f\xb4\x70\xd8\xb9\x0d\xea\xad\xd6\xed\x96\x01\xf9\x88\xc6\xab\x7a\x58\x97\xc9\x5c\x23\x35\x98\x5c\x65\x03\x73\xb9\xfc\x12\x2c\x88\x37\x80\x29\xd0\x62\xb4\x1d\xf3\xe7\x42\x5e\x28\x76\x7f\x48\x6f\xe0\x43\x46\xb5\xc7\x6e\xfb\x93\x95\xcb\x2f\x76\x1c\xe6\x56\x21\x6c\x5a\x6e\x27\xdb\xe4\x91\xc0\x1e\x10\x2a\xaa\x2e\xfd\xc4\xaf\x2e\xaf\xfc\x43\xdf\x73\xaf\xcf\x40\x66\x3f\xa1\x11\xfd\x8a\x37\xba\x90\xf1\x8e\xce\xe7\x3b\x1f\x90\xa4\x8b\xdc\xb3\x1e\x86\x7b\x43\x6b\x58\x4a\x59\xde\x51\x83\x53\x45\x22\xa6\xb4\x80\x71\x1f\x2a\xeb\xba\x5e\x78\xd7\x58\x73\x16\xe0\x69\x41\x6c\x84\x29\x18\xdd\x60\x94\x84\x30\x53\xa8\xe8\x57\x4c\xb7\xa2\x4d\x1c\x07\x3d\x5c\xe6\xe7\x66\x77\xe9\xa7\x09\x38\x99\x25\x9f\xa6\x62\x85\x10\x22\x76\x5d\xdb\x20\x5f\x3a\xd5\x55\x3f\x6a\x6b\x8b\x58\xaf\x83\xeb\xb1\xb0\x30\x05\x2f\x0d\xea\x77\x92\xd9\x0d\x6c\xbf\x6a\xbb\xdc\xac\xb5\x5d\x7b\x01\xfe\x74\x0a\xc7\x22\x66\xdc\x86\x17\xc8\xea\x35\xe6\xc8\x6f\x50\x07\x8b\x0f\xf1\xdf\x1e\x04\x55\xfc\xa3\xef\xf5\xe9\x14\x94\xb6\xcb\xee\x58\x90\x77\xb4\x42\x48\x66\x8a\x27\x7d\x5b\xb7\x65\x17\x06\xab\xce\x36\xc9\x89\x1f\x23\x49\x36\x7e\x31\x03\x37\xd5\x61\x8c\xb6\xb5\x04\xf3\x6a\x37\xae\x77\xf8\x6d\xdb\xe2\xc1\x25\x32\xde\xc1\xec\xf5\x57\x71\x9b\xdc\x0e\xe6\x60\x3f\x39\xc8\xac\x7b\xdf\xc2\x0b\xf4\x98\x2a\x1e\x06\xd1\x25\x98\xe6\x36\x5e\x07\xd6\xb6\x19\xbc\xe5\xb5\x49\xaf\xb1\x54\x30\x0e\x37\x8b\xbc\xe6\xe2\x0d\x96\x2a\x52\xea\xc8\x6a\xc9\x07\xac\x65\xa3\x73\x3c\xa7\x2b\x4c\x2d\x5a\x5a\x1b\xaa\x8d\xdd\xe0\x13\xa8\xf9\x1f\x68\x9f\x32\xb0\x9b\x1f\x75\x41\x73\x5c\xb7\x13\x2f\x0a\x28\xf6\x8f\xe2\x0a\x63\x49\xdd\x00\xda\x96\xfc\xaf\x41\x7d\x9b\x66\x9d\x65\x5e\x4a\x81\xe7\xc1\xdc\xba\x91\xb9\x95\xa4\xd9\x68\x0b\x2d\x68\xdf\x17\x45\x8d\xc6\xe7\x94\x91\xb7\xbc\xe2\x26\xb5\x59\xf5\x20\x19\x35\x74\x83\x36\x2b\xcb\xdf\x5d\xd9\x64\xa6\xd4\x5c\x0a\x83\xdf\x4d\xc4\x8e\x17\xc1\x3a\x4c\xba\x4c\xc8\x5c\x36\xc2\xec\xf1\x72\x4e\x6d\x76\x50\xbb\xcf\xb0\x36\x5a\xde\x3e\xd0\xf1\x46\xbb\xc9\x3f\x1e\x6c\x8e\xa3\xa3\x45\x3c\x6e\xf0\xb9\xd1\xfc\x34\xe1\x2c\xf9\x1c\xa2\x87\x05\xed\x67\xb5\x10\xbf\xd1\x92\xb3\xff\x70\xc1\x2e\x34\x4f\x1b\xcd\x63\x69\x3b\x8d\x3f\xc3\x12\x0d\xbe\x17\xb8\x38\x4b\xad\x52\x90\xc5\x19\xf9\xbf\x25\x7b\xdb\x2e\x98\x75\x25\x0b\x96\x65\xe4\xd5\x77\xcc\xef\x2a\x7d\xc0\x0f\x0f\x98\x1e\xd6\x0d\xbf\x77\x1f\x68\xc6\x52\xb2\xdb\x7d\xdd\x38\xa7\xb7\xa5\xa4\x0c\x7c\xda\xf1\x6d\xbd\xbf\x1d\xa9\x05\x8b\xcd\xb8\x93\x8d\x21\xad\x2c\xf6\xec\x49\x5c\x63\xee\x14\xc7\x4d\xd5\x0e\x6f\x22\x2f\xe0\x51\x3e\xbc\xac\x6e\x15\xff\xf8\x01\xdb\xe2\x78\x2d\xdd\xda\x23\xbe\x1d\x4e\x06\x6d\x9b\x5c\x6d\xdd\xff\xc8\x74\x7b\x71\xf7\x39\xb8\x92\x48\x68\x06\xd9\x67\x31\x3c\xc6\x6d\x57\x15\x0a\xb6\x69\x99\x0f\x41\x6f\xf0\xa0\x29\xa7\xf7\x98\x1f\x36\x7a\x7f\x56\x0f\x7b\x0f\x7e\xcd\x6b\xf0\xb8\xf7\x1e\xfc\x24\xa7\xfc\x13\x0f\x57\x63\x87\x37\xaf\x71\x77\x3d\x4c\xe0\x9e\xd7\x2a\xe0\x15\xe0\x20\xa7\xfd\xdf\x87\x47\x83\x1a\xd2\x44\x87\xce\x27\x13\x48\x84\x34\x50\xc8\x46\xb0\x24\x2e\x1f\xc0\xb2\xc6\x7d\x9b\xd6\x02\x87\x1f\x5d\xe9\x90\x07\x07\xd2\x7a\x87\xda\x1e\x6c\x87\xda\x41\xfc\x97\xa9\xfd\xab\xe9\xdd\x51\xbc\x5f\x68\x9f\xe9\x5d\xc4\x7b\xd8\xde\xee\x23\xbd\x6d\xe6\x61\xec\x7e\x8d\x0f\x1d\xd5\x7f\x80\xda\x7b\x32\xfe\xfb\x14\x8d\xf5\xae\xd7\xb1\x89\x9b\xa7\x3f\x03\x00\x00\xff\xff\x4e\x66\x24\x3f\xa0\x0f\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 4000, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
