// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x8f\xdb\xba\x11\x7e\xae\x7f\xc5\x1c\x21\x08\x24\x43\xe1\xf6\x79\x01\x17\x70\x76\x37\x1b\x17\x41\x76\x9b\x4d\xda\x02\xc1\x22\x87\x96\x46\x5a\x26\x32\x49\xd0\x54\x2e\xf5\xd1\x7f\x2f\x78\x91\x45\x5d\x7c\x69\x93\x76\x1f\x12\x9b\x9c\xf9\x66\x38\x97\x8f\x43\xef\x76\x90\x63\xc1\x38\x42\x94\xd5\x2a\x8f\xa0\x69\x66\xbb\xdd\xc5\x1c\x96\x79\x0e\xfa\x09\x61\x4d\xb7\x08\x4f\x48\x73\x54\x50\x08\x65\xd7\x4a\xe4\xa8\xa8\xc6\x1c\x0a\x56\x21\xcc\x2f\xac\x12\x3c\x93\x5f\x4a\xb8\x5c\x38\x95\x67\xe4\x4a\xf0\x82\x95\xe4\x9e\x66\x5f\x68\x89\x0e\x18\x34\x6e\x64\x45\x35\x42\xe4\x30\x23\x78\x66\x76\x66\x6c\x23\x85\xd2\x10\xcf\x00\x00\x32\xc1\x35\xcd\x34\x44\x25\xd3\x4f\xf5\x9a\x64\x62\x73\xb1\xa1\xdf\x59\x25\x6e\x36\x9b\xcd\xe6\xa2\x14\x2f\xbe\xe1\xfa\xc2\x8b\x45\x56\x27\x94\x2d\x85\x28\x2b\xbc\xa8\x6b\x96\x4f\x6c\x32\xfe\xa2\x14\x9c\x65\xe6\x93\xdb\x2e\xc5\x27\x2d\x44\x75\xcc\x9e\xd9\xf7\x58\x5b\xad\x18\x2f\xb7\xd1\x2c\x99\xd9\x53\x6f\x44\x8e\x95\x39\x77\x44\xa5\xb4\x01\x9c\x15\x35\xcf\xc0\x98\x5f\xe5\x31\xcb\xc1\x69\x24\x76\x85\x7c\xf8\xb0\xba\x86\x9d\x85\xaa\x53\xf8\x64\x14\xed\xfa\x3d\x55\x5b\x8c\x59\x9e\xcc\xfe\xa4\x50\xd7\x8a\x43\x3d\x6b\xa1\x38\x7e\x5b\x4a\x16\x67\x15\x43\xae\x61\x7e\x65\xff\x4f\x41\x48\x0d\xf3\xa5\x64\x77\x52\x33\xc1\x13\xfb\xd9\x43\x8b\xf5\x67\x83\xfc\x7c\x29\xd9\xce\x89\x5f\x82\x53\x6f\x66\x56\x80\x15\x56\xfd\xb7\x05\x70\x56\x79\x25\xbf\x5e\x21\x8f\x85\xd4\xe4\x15\xc3\x2a\xdf\x26\xf0\x17\xf8\x73\x20\x60\xfe\x68\x61\xc0\x97\x99\x31\xeb\xa4\x76\xcd\x40\x80\x3c\xa0\x76\x5b\x01\xd6\xc7\xe8\x4a\x21\xd5\x18\x3d\x26\x3d\x71\xb1\xfe\xec\x25\x88\x13\x80\x05\xd0\x62\x36\xb4\xf9\xdf\x99\xfc\x20\xf3\xe3\x26\x9d\x80\x33\xd9\x6e\x3b\x6c\xf7\xaf\x4f\x87\x58\x7f\x36\x09\xd1\x3f\x24\xc2\x3e\xe8\x26\xb7\x75\xa6\x7d\x7c\x1c\x20\x6c\xa8\xfc\xe8\x72\xfe\xf8\xf1\xd1\x7d\x08\x35\x27\x75\x7a\x6b\xe6\xcf\x07\x22\x3c\xf1\x7e\xcf\x7b\x3c\xda\x73\xfe\x5e\xf5\xca\xa4\xb3\x1c\x48\xf7\xcd\xbd\xa6\x5b\x58\x0b\x51\x1d\x38\x83\xdd\x6a\x4b\x31\xa6\x05\xcc\x43\xa8\xa4\x8b\x7a\xe1\x54\xdb\x33\x27\x1e\x9e\x16\xc4\x58\x58\x80\x56\x35\xb6\x2b\xde\xcc\x02\x36\xf4\x0b\xc6\x03\x6b\xa9\xad\x41\x07\x97\xb8\xbc\x19\xee\xf9\x94\x82\x5d\x33\xc5\xa7\x28\x2f\x11\xbc\xc5\x2e\x6a\x7b\xe4\x8f\x76\xeb\x31\xb4\xda\x98\x43\x98\x8e\xe5\x22\xc7\xad\x01\x29\x58\xa5\x51\xbd\x15\xb9\xe1\xab\xb7\x76\xb5\x69\xc3\x75\xc3\x73\x29\x18\xd7\xc0\xb8\x46\x55\xd0\x0c\xbd\x99\x37\x6c\xab\xe3\xb9\x27\x1f\x72\xcb\xf8\x6b\xac\xa4\x73\xd2\xe5\xe5\xc0\xa6\x4b\xe8\x81\xcd\x5b\x3c\x84\x79\x8d\x15\x4e\xaa\xb5\x8e\x5e\xd5\x2a\x7f\x59\xb3\xca\x30\x74\x2f\xad\x4b\xc9\x26\xea\x6a\xb7\xf3\xb1\x7b\xc6\x4d\x08\x7c\x30\x9a\x7e\x33\xd9\x28\x91\xb7\x74\x63\x78\x1b\xe6\xbd\xaf\x4b\xc9\x42\x30\xe4\x79\xab\xdd\xec\xab\xe4\x2d\x7e\x0b\xdc\x1a\x10\x57\x02\xf3\xd0\x67\xe7\x5a\xb6\xb6\x7c\x15\x6c\xf8\xfe\x3e\xe9\x6f\xb6\x26\xe6\xa4\xa4\xef\xf3\xc2\xf8\x30\xf4\xdb\x3b\x92\x1a\xce\x4b\x66\xe3\x03\xf8\x4e\xcf\xd6\x5d\xb9\x67\xeb\x9e\xb7\xc9\x3b\x51\x6b\x8c\xa5\xc2\x82\x7d\xf7\xc4\x9e\x82\x82\x92\x71\xb2\xb2\x7b\x2a\x81\xb9\xf9\xe6\xbe\xdc\x2a\x51\x4b\x7f\x44\x56\xc0\x6f\xfe\xf2\x30\x0d\x71\x6f\x31\xe2\xe8\x22\x4a\xc1\xe1\x25\x41\x9a\xbc\x85\x45\x7b\x39\x91\x07\xab\xf9\x57\xc1\x78\x4f\x25\xe8\x7b\x7b\xf9\x2a\x62\x4d\xc6\xed\xf6\xd9\x31\x74\x6a\x65\x0a\x91\x8b\x5a\x77\x6f\x47\xe9\x74\x8c\x87\x11\x0c\x43\x58\x1e\x8e\xa0\x37\x64\x03\x33\x8c\x54\x0a\x92\xea\xa7\x7d\x5c\xa9\x64\xfb\x3e\xdc\xb3\x89\x64\x2e\xa8\x97\x0b\xb0\x20\xed\x81\xa9\x7e\x4a\x7a\x12\xe4\xf6\xe6\x7d\x1c\x19\xef\xfb\xad\xf3\x9a\xf2\xbc\xc2\x98\x4a\x46\x4c\x2f\x27\x53\x5a\x17\x97\x2c\x3f\xaa\x79\x8b\x23\xc5\xfb\xbb\x87\x53\xf6\x1c\x07\x8c\x14\x97\xef\xaf\x5e\x9f\x61\xd3\xd1\xcb\x50\xfb\xfa\xe6\xcd\xcd\xfb\x9b\x33\xd4\x1d\x93\x24\x89\xa7\xc1\xc3\x15\x61\xb2\xec\x99\xd5\xee\xb5\x64\xdd\xe6\xd8\xec\x2b\xcc\x90\x7d\x45\xe5\x25\xde\xb5\x5f\x03\x08\x2a\xd9\x83\x63\x9f\xcb\x05\x48\x65\xb8\xb4\x2d\x9e\x68\x29\x59\x14\xca\xda\x21\x6a\xa5\x71\xd3\xc9\x46\x19\x71\x7c\x41\xa2\xa0\xe8\x9c\x07\x96\xf8\xfa\x36\x9a\x66\xcc\x75\xf3\x90\xab\x5e\x59\xb2\x1f\x69\xb9\x65\xdf\x46\x87\xc1\xbd\xf6\x81\x6b\xfa\x9e\x49\x04\x53\xee\xf1\x13\x56\x12\x86\x64\x9d\x42\xd6\x89\xf5\xd9\xd4\x57\xc4\x00\x6f\x59\x18\x63\xc7\x00\x99\x89\xd5\x7c\xa2\x1f\xbb\x7b\xe8\xa4\x53\x75\x27\xd6\x47\x72\xfa\x77\x1c\x87\x90\x3f\xe9\x97\x69\xb7\x93\x5e\x55\xad\x50\x1f\xe5\x6f\x35\xaa\x1f\x7d\xa8\x6b\xaa\xe9\x49\x67\xcc\x3c\x32\xf0\xa7\xbb\xd2\x83\x19\xd2\x75\xc7\x4b\x2c\x84\x3a\xee\xdf\xd1\x13\xde\xe2\xe9\x03\x96\x78\xe2\x7c\xbe\x0e\xdb\x9b\x74\x58\x8a\xa7\xdf\x01\xa3\xce\xe8\xea\xd5\xf3\xf3\xf3\xa1\xc8\x6e\x29\xd9\x65\xff\xa1\x61\x81\x93\x66\xe4\x52\x9c\x19\x0b\x9d\xb6\x89\xa8\x1d\x8a\x26\xcf\x1b\x5e\x6a\x46\x80\xbc\xc3\xad\xa8\x55\x86\xf7\xb4\xc4\xd8\xc6\x69\xab\xa9\xb2\x73\x56\x0a\x5b\xf6\x2f\x04\xcb\xf6\x71\x90\xa4\x14\x82\x0b\x60\x7f\x43\x9a\x18\x5e\x2e\x06\xf4\xd1\x34\xc4\x46\x32\xee\x8f\xfb\xac\x80\x8c\xb8\x1e\x26\xfb\x2a\x1c\x3d\x7e\xf6\xd7\xe1\x50\xd4\x1e\x2d\xb5\x26\xfb\xb8\xfd\xb1\x29\xab\x04\x77\xfd\x64\x58\x8c\x49\x24\x57\x66\x25\x4e\x66\x63\xcf\xbd\xc0\x5d\x51\x6c\x51\xbb\x10\x24\xe4\x0d\xdb\x30\x1d\x9b\x20\x0c\xdc\xb7\x85\xdc\x82\x2e\xab\xea\x9f\xd6\x23\xb2\x94\xf2\x4a\x70\x8d\xdf\xf5\xc0\xc4\x57\xaa\x20\x37\xed\x11\x44\x11\x16\x0e\xe7\x68\x60\x6c\x4f\x1d\x0c\x8c\x85\x5c\x8c\x35\x7c\x7c\x2c\xfc\xb1\x00\xf9\xea\x33\x30\x69\x17\x2d\x72\x25\x6a\xae\x27\x8e\xb4\x07\x19\xf7\xc5\x54\x11\xfa\x51\xf9\x64\x19\xd6\x8a\xd9\x61\x73\x44\xe6\xe6\x6f\x95\xfb\xe9\x77\x75\x4d\xde\x9b\x9b\xa0\x69\xe0\xf7\x5a\xb1\xcb\x88\xe5\xd1\xef\x9d\x4b\x01\x75\x58\xbf\x57\xfc\xef\xb4\x62\xf9\x4b\xc6\xf3\x0f\x8a\xc5\xb5\x62\x41\x4a\x98\xbf\xd9\x46\xb5\x7a\x8b\xe3\x73\xa7\xc6\x41\xb2\xca\x93\xd9\x54\x92\x7a\x3c\x35\x99\xa8\x49\xd1\x20\x43\xc9\x6c\x9c\x9c\x91\x63\x4e\xf7\x8e\x63\x6c\x55\xc8\xcd\x77\xcc\x8e\x64\xa8\xd7\xd9\x3e\x0f\xe7\x25\xcd\x3f\x8b\x4e\x26\x6d\x2d\xf2\x1f\x87\xb3\x76\x4f\x7f\x54\x82\xe6\xfd\x87\xcb\x59\xc9\x8a\x0d\x70\x90\xaa\x83\xb4\xe2\x1d\x4d\x82\x98\xbd\x68\x87\x28\xfb\x7b\x48\x3b\x33\x0d\xde\x52\x66\xec\xcf\xfa\x3f\x6f\xd8\xf7\xf0\x1f\x7f\xc0\x70\xb9\xfd\xc9\xc2\x0e\x60\xc4\xc5\xc8\xae\x99\x29\xfc\x71\xa2\x1f\x2d\x1d\x3c\xa0\x9e\x52\xb0\x07\x23\x3e\x30\x64\x4a\xe2\x50\xa7\x9a\x83\x85\x33\xfd\xb0\x04\x83\x99\xe7\x78\x01\x76\x82\x93\x04\xda\x8c\x1b\xc4\x1d\x88\x7e\xc5\x63\x04\x37\xf6\xc5\xcd\x25\xe7\x38\x63\x25\x0f\x34\xc3\x74\x35\xc7\x9d\xd8\xa9\x5a\xf6\xef\xff\x73\x09\xe8\x7f\xc9\x3f\xcf\xfb\x04\xf4\xb3\xdd\xf3\x0b\x99\xcc\x22\x2c\xa6\x52\x15\x9e\x23\x8e\x94\x8f\x7f\x94\x42\xc4\x85\x86\x42\xd4\x3c\x8f\x82\x7c\x01\x56\x5b\x3c\x30\x14\x18\x23\xfe\xbd\x34\x98\x04\xce\xec\x5a\x18\x76\xae\x03\x1b\x75\xae\x5f\xfe\x8f\x3b\x17\x7e\x71\xf7\xc2\xe8\xae\x0d\xba\x78\x70\xa8\x7d\x4b\x04\xef\x84\xd3\xb3\x50\x27\x7c\xe6\x34\xe4\x12\x7d\xb4\xa5\x8f\x3b\x76\xa4\xab\x27\x3c\x3b\xdc\xd9\x7d\xd7\x9a\x9f\x6e\xf3\x5b\x3c\x63\xd6\xfd\xff\xf7\xf8\xa9\x81\x98\xfc\xe3\x09\x15\xc6\xc3\x9f\x77\xc8\xea\x3a\xf6\x6d\x3a\x3d\x71\xb4\x6f\x9a\xe3\xf4\xea\xa5\x0e\x10\xfd\x74\xc8\x6d\x69\xbc\x62\x6a\x3b\x31\xfc\xb5\xa9\xe8\x7e\x5f\xda\x7f\xfa\x77\x00\x00\x00\xff\xff\xa9\x39\x41\x80\xb5\x1a\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 6837, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
