// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\x3a\x12\x7e\x5e\xff\x8a\x39\x42\x10\x48\x86\xca\x9c\xe7\x00\x5e\xc0\x4d\xd2\xd4\x8b\xa2\xc9\x36\xcd\xee\x02\x45\xd0\x43\x4b\x23\x85\x8d\x4c\x6a\x69\xaa\x6d\xd6\xd5\x7f\x5f\xf0\x22\x8b\xba\xf8\xb2\x9b\x02\xa7\x7e\x48\x6c\x72\xee\x33\xfc\x66\xc8\xcd\x06\x52\xcc\x18\x47\x08\x92\x4a\xa6\x01\xd4\xf5\x64\xb3\x39\x9b\xc2\x3c\x4d\x41\x3d\x22\x2c\xe9\x1a\xe1\x11\x69\x8a\x12\x32\x21\xcd\x5a\x8e\x1c\x25\x55\x98\x42\xc6\x0a\x84\xe9\x99\x61\x82\x93\xf2\x29\x87\xf3\x99\x65\x39\x21\x17\x82\x67\x2c\x27\xb7\x34\x79\xa2\x39\x5a\xc1\xa0\x70\x55\x16\x54\x21\x04\x56\x66\x00\x27\x7a\x67\xc2\x56\xa5\x90\x0a\xc2\x09\x00\x40\x22\xb8\xa2\x89\x82\x20\x67\xea\xb1\x5a\x92\x44\xac\xce\x56\xf4\x3b\x2b\xc4\xd5\x6a\xb5\x5a\x9d\xe5\xe2\xd5\x37\x5c\x9e\x39\xb2\xc0\xf0\xf8\xb4\xb9\x10\x79\x81\x67\x55\xc5\xd2\x91\x4d\xc6\x5f\xe5\x82\xb3\x44\x7f\xb3\xdb\xb9\xf8\xac\x84\x28\xf6\xe9\xd3\xfb\x4e\xd6\x5a\x49\xc6\xf3\x75\x30\x89\x26\xc6\xeb\x95\x48\xb1\xd0\x7e\x07\xb4\x2c\x4d\x00\x27\x59\xc5\x13\xd0\xea\x17\x69\xc8\x52\xb0\x1c\x91\x59\x21\xf7\xf7\x8b\x4b\xd8\x18\x51\x55\x0c\x9f\x35\xa3\x59\xbf\xa5\x72\x8d\x21\x4b\xa3\xc9\x5f\x24\xaa\x4a\x72\xa8\x26\x8d\x28\x8e\xdf\xe6\x25\x0b\x93\x82\x21\x57\x30\xbd\x30\xff\x63\x10\xa5\x82\xe9\xbc\x64\x37\xa5\x62\x82\x47\xe6\xbb\x13\x2d\x96\x5f\xb4\xe4\xd3\x79\xc9\x36\x96\xfc\x1c\x2c\x7b\x3d\x31\x04\x2c\x33\xec\xbf\xcd\x80\xb3\xc2\x31\xb9\xf5\x02\x79\x28\x4a\x45\xde\x30\x2c\xd2\x75\x04\x7f\x85\xdf\x3d\x02\xfd\xa1\x99\x16\x3e\x4f\xb4\x5a\x4b\xb5\xa9\x7b\x04\xe4\x0e\x95\xdd\xf2\x64\x7d\x0a\x2e\x24\x52\x85\xc1\x43\xd4\x21\x17\xcb\x2f\x8e\x82\x58\x02\x98\x01\xcd\x26\x7d\x9d\xff\x9f\xca\xfb\x32\xdd\xaf\xd2\x12\x58\x95\xcd\xb6\x95\x6d\xff\xba\x74\x88\xe5\x17\x9d\x10\xf5\x5c\x22\x6c\x83\xae\x73\x5b\x25\xca\xc5\xc7\x0a\x84\x15\x2d\x3f\xd9\x9c\x3f\x7c\x7a\xb0\x5f\x7c\xce\x51\x9e\xce\x9a\xfe\xb8\x40\xf8\x1e\x6f\xf7\x9c\xc5\x83\x3d\x6b\xef\x45\xa7\x4c\x5a\xcd\x1e\x75\x57\xdd\x5b\xba\x86\xa5\x10\xc5\x0e\x1f\xcc\x56\x53\x8a\x21\xcd\x60\xea\x8b\x8a\xda\xa8\x67\x96\xb5\xf1\x39\x72\xe2\x69\x46\xb4\x86\x19\x28\x59\x61\xb3\xe2\xd4\xcc\x60\x45\x9f\x30\xec\x69\x8b\x4d\x0d\x5a\x71\x91\xcd\x9b\xc6\x9e\xcf\x31\x98\x35\x5d\x7c\x92\xf2\x1c\xc1\x69\x6c\xa3\xb6\x95\xfc\xc9\x6c\x3d\xf8\x5a\x6b\xed\x84\x3e\xb1\x5c\xa4\xb8\xd6\x42\x32\x56\x28\x94\xef\x45\xaa\xf1\xea\xbd\x59\xad\x9b\x70\x5d\xf1\xb4\x14\x8c\x2b\x60\x5c\xa1\xcc\x68\x82\x4e\xcd\x3b\xb6\x56\xe1\xd4\x81\x0f\xb9\x66\xfc\x2d\x16\xa5\x35\xd2\xe6\x65\xc7\xa6\x4d\xe8\x8e\xcd\x6b\xdc\x25\xf3\x12\x0b\x1c\x65\x6b\x0c\xbd\xa8\x64\xfa\xba\x62\x85\x46\xe8\x4e\x5a\xe7\x25\x1b\xa9\xab\xcd\xe6\x95\x0b\xde\x09\xd7\x31\x70\xd1\xa8\xbb\xa7\xc9\x84\x89\xbc\xa7\x2b\x0d\xdc\x30\xed\xfc\x9c\x97\xac\x23\x0d\x79\xda\xb0\xd7\xdb\x3a\x79\x8f\xdf\x3c\xc3\x7a\xd0\x15\xc1\xd4\xb7\xda\x1a\x97\x2c\x0d\x62\x79\x1b\xee\x84\x1f\xb6\x38\x59\x12\xed\x2c\xe9\x5a\x3d\xd3\x46\xf4\x2d\x77\x96\xc4\x1a\xf6\xa2\xc9\x88\x0b\xee\xb4\x27\xcb\xb6\xe4\x93\x65\xc7\xde\xe8\x83\xa8\x14\x86\xa5\xc4\x8c\x7d\x77\xe0\x1e\x83\x84\x9c\x71\xb2\x30\x7b\x32\x86\x92\x25\x4f\xde\x49\x98\xea\x4d\xbb\x77\x2d\x45\x55\x3a\x9f\x59\x06\xbf\xb9\x7e\xa2\xcf\xc8\xad\x11\x19\x06\x67\x41\x0c\x56\x7c\xe4\x65\xce\x29\x9c\x35\xfd\x8a\xdc\x19\xce\xbf\x09\xc6\x3b\x2c\x1e\x14\x98\x7e\x2c\x89\x51\x19\x36\xdb\x66\xe7\x91\xae\x6f\xb5\x89\xe7\x33\x6b\xaa\x6b\x04\xa7\xa7\xe6\xe8\xe9\x25\x03\xfc\x47\x26\x40\xfb\xd1\x48\xfc\xf1\x63\x6b\xe0\x82\xcf\xa5\xa4\xcf\x46\x5c\x0c\x1f\x9f\x4b\xec\xa4\x23\xea\xb5\x95\x64\xe9\x2c\xcd\x63\x08\x2c\x65\x3b\x3d\x04\xf1\x78\x9a\xa3\x1e\x66\x7b\xe9\xf4\xf3\x99\xef\x4e\xa7\xd3\x69\xd2\xd2\xcf\x53\x0c\x25\x55\x8f\xdb\x24\xd3\x92\x6d\x81\x61\x0b\x6f\x25\xb3\x29\x3d\x9f\x81\x11\xd2\x84\x9b\xaa\xc7\xa8\x43\x41\xae\xaf\x3e\x86\x81\x76\xa4\x7b\x96\xdf\x52\x9e\x16\x18\xd2\x92\x11\x0d\x2e\xd1\x18\xd7\xd9\x39\x4b\xf7\x72\x5e\xe3\x80\xf1\xf6\xe6\xee\x90\x3e\x0b\x4a\x03\xc6\xf9\xc7\x8b\xb7\x47\xe8\xb4\x78\xd7\xe7\xbe\xbc\x7a\x77\xf5\xf1\xea\x08\x76\x0b\x6d\x51\xe4\x70\x79\x77\x89\xe9\x84\x3b\xa8\x37\x7b\x4d\xf7\x68\x72\xac\xf7\x25\x26\xc8\xbe\xa2\x74\x14\x1f\x9a\x9f\x9e\x08\x5a\xb2\x3b\x0b\x87\xba\xea\xa5\x06\xf7\xa6\x8e\x82\x79\xc9\x02\x9f\xd6\x4c\x75\x0b\x85\xab\x96\x36\x48\x88\x85\x2f\x12\x78\xf5\x67\x2d\x30\x48\xdc\xd5\x51\xd7\x43\xf0\x9d\xfa\xd8\xf9\xc6\x74\x9f\x01\x97\x5d\xde\x52\xdd\x3d\xb1\xd2\x66\x69\x5e\x29\x71\x95\xe6\xd8\xf6\xea\x66\xdf\xe6\x61\xb8\xbf\xcf\x38\xa7\x7d\xc7\xdc\x71\xcb\x4a\x04\x7d\x5c\xc2\x47\x2c\x4a\xe8\x77\x9f\x18\x92\x96\xac\xdb\x1d\x2c\xff\x66\xa3\x31\xe1\x91\xae\xb5\x41\x6b\x9d\xd4\xba\x8e\x01\xcd\x8f\x0e\xb9\xd9\xdf\x6c\xdc\x91\x8d\x7a\x66\xcc\x33\x6d\xe3\x3e\x3b\x98\x4e\x51\xd7\x82\x17\xeb\xb6\xe1\x3c\x18\x82\xaa\x25\xeb\x1a\x60\xf9\x6f\xf8\xcb\xa3\xe0\x12\xfb\xa7\x44\x41\x43\xd1\xc1\x18\x14\x0d\x51\x57\xf9\xdf\x2b\x94\xcf\x5d\x51\x97\x54\xd1\x83\x3e\xe8\xe1\x71\xda\xeb\x11\xdb\xf9\xcb\x1b\xf8\x2d\x72\xbc\xc6\x4c\xc8\xfd\xf6\x8d\x04\xa6\x35\xeb\x1a\x0f\x3b\x98\xe3\x01\xff\xdc\x19\x6b\x86\x9e\xfe\x31\x3b\x7c\x69\x1b\xa0\x46\x7b\x16\x5d\xef\x3a\xed\x93\x6c\xe6\x25\x3b\xef\xde\x0a\x8d\xe0\xa8\x1e\x98\x14\x26\x5a\x43\xcb\xad\x23\x6a\x26\xd8\x51\x7f\xfd\x8e\xac\x09\xc8\x07\x5c\x8b\x4a\x26\x78\x4b\x73\x0c\x4d\x9c\xd6\x8a\x4a\x33\x14\xc7\xb0\x66\xff\x41\x30\x9d\x30\xf4\x92\x14\x83\xd7\x1c\xb7\xb3\x8b\x8e\xe1\xf9\xac\x07\xad\x75\x4d\x4c\x24\xc3\xee\xdd\x8c\x65\x90\x10\x8b\x4f\x64\x5b\x85\x83\x9b\xea\x76\x6a\xe8\x93\x1a\xd7\x62\xa3\xb2\x2b\xb7\x3b\xe2\x26\x85\xe0\xf6\xf4\x9a\x19\xa8\x44\x72\xa1\x57\xc2\x68\x32\xb4\xdc\x11\xdc\x64\xd9\x1a\x95\x0d\x41\x44\xde\xb1\x15\x53\xa1\x0e\x42\xcf\x7c\x53\xc8\x8d\xd0\x79\x51\xfc\xcb\x58\x44\xe6\x65\x79\x21\xb8\xc2\xef\xaa\xa7\xe2\x2b\x95\x90\xea\xe3\xe1\x45\x11\x66\x56\xce\xde\xc0\x98\x33\xb5\x33\x30\x46\xe4\x6c\xc8\xe1\xe2\x63\xc4\xef\x0b\x90\xab\x3e\x2d\x26\x6e\xa3\x45\x2e\x44\xc5\xd5\x88\x4b\x5b\x21\xc3\x73\x31\x56\x84\xee\x5e\x73\xb0\x0c\x2b\xc9\xcc\xbd\x60\xd0\xa8\xf4\x67\x91\x82\xc5\xb9\x13\x4e\x16\x97\x64\xb1\x36\xaf\x2b\x75\x6d\xe7\x35\x0d\x6a\xc5\xda\x81\xa1\xa5\xd0\x33\xa8\xf9\xdd\x0c\x89\xf0\x47\x25\xd9\x79\xc0\xd2\xe0\x8f\xd6\x03\x0f\x69\x8c\x9b\x0b\xfe\x0f\x5a\xb0\xf4\x35\xe3\xe9\xbd\x64\x61\x25\x99\x97\x41\xe6\x86\x84\x41\x69\x5f\xe3\x30\x4c\xb1\x99\x4f\x87\x06\xbb\xc7\xa2\x4a\x32\xb2\x48\xa3\xd6\x70\xbb\xd0\x9a\x1b\x4d\xc6\x6a\xa1\x03\x87\xa3\xf5\x30\x4a\xea\x15\x42\x7f\x8a\x86\xc1\x18\x54\xd7\x8e\xf7\x86\x63\x68\x58\xc8\xd5\x77\x4c\xf6\x14\x42\x07\x40\x5c\xba\x8f\xab\x0d\x77\x55\x3e\x58\x1b\x4b\x91\x3e\x9b\xe2\xe8\x76\xbe\xdd\xd9\x0b\x35\x87\x97\xbb\x9d\xb0\xe4\x2c\x88\xc6\xae\xcd\xe6\xf1\xab\x99\x47\x7b\xf7\x66\x7d\x11\x4a\xba\x6f\x59\xe6\xf1\xe3\xc7\x0f\xe8\x2f\xbb\x77\x8a\xfe\x3d\xc7\xae\x9b\x89\x97\xd8\x88\x98\x05\xa8\xeb\x87\x91\x33\x6e\x20\xe6\x0e\xd5\x18\xbd\x71\x96\x8c\xed\xec\x3a\xf5\xfd\xbb\x53\xb3\xc6\x32\xc8\x15\x84\xfa\x6a\xa8\x8d\xb5\x13\x45\x04\xbf\xf7\xaf\x80\x09\x19\x99\x56\x37\xbd\x87\x85\x6d\x1c\xd1\x8d\xea\x56\x5c\x2f\x90\x4e\xa4\x71\xc1\x10\x18\x47\xb0\xe7\xc8\x6e\xf0\xdb\x06\xc7\xe1\x03\x92\x7b\xce\xfe\x5d\xe9\x08\xdb\x70\xb9\x03\x36\x4f\xd3\xed\xec\x33\xa6\x21\x3c\x60\x81\x15\xcf\x85\xea\xa8\x20\x84\x8c\x4c\x54\xc3\x80\xc3\xf0\xfd\xe1\x70\x46\xfc\x93\xef\x4d\xeb\xfb\xcf\x7d\x4b\xe8\xb5\xc7\xf1\x19\xb1\xf5\x78\xc4\x87\x7a\x08\x7c\xb6\x06\xe9\x57\xdc\xd7\xe7\x86\x46\xdb\xa9\xf6\x18\xab\x0d\xa5\x07\x56\x2f\x33\xbb\x03\x4b\x61\x0b\x7e\x87\x40\xc9\x3d\xee\x1d\xdb\xb0\x7e\xa1\x7e\x75\xda\x6d\x58\x3b\x51\xf3\x17\x68\x69\x46\xf3\x6c\xac\x26\x7c\xc7\xc2\x40\xba\xfc\x05\x31\x04\xfa\xf0\x65\xa2\xe2\x69\xe0\xe5\xdb\x6a\x1b\x1f\x42\xb5\x12\xf7\x76\xd1\x9b\x3c\x8f\x44\x79\xe8\x23\xbd\x15\x36\x40\x7a\xb7\xfc\x53\x90\x1e\x7e\x12\xda\xc3\x3e\x00\x1a\xac\x1f\x83\xfc\xd0\x41\xff\xde\x5b\xc4\xd0\x91\xff\xa5\x03\xc0\x4f\xe8\x02\xf0\x0b\x77\x82\x61\x32\x60\xbc\x23\x1c\x9f\x35\x1f\x68\xbd\x87\x8c\xc3\xd7\xa7\x96\xf8\x65\x1d\x62\x68\xaa\x3d\xd4\x7b\xfb\xc4\x7e\x0f\xf6\xb4\x8a\x11\x17\x7e\x42\xbb\xe8\xfa\x50\xbf\xb8\x77\x5c\xe3\x11\x17\xee\x5f\xbe\x71\x1c\xba\xc4\x93\x7f\x3e\xa2\xc4\x70\x80\x73\x8b\xcb\xf0\x85\x2d\x62\xfc\xda\xd3\xbc\xdf\xec\x9f\x21\x1c\xd5\xe8\xab\xc0\xae\xcc\x9a\x52\x7d\xc3\xe4\x7a\xe4\xa2\xdb\x64\x7c\x5b\x36\xed\xb7\xff\x06\x00\x00\xff\xff\xd9\x16\x93\xd6\x4e\x21\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8526, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
