// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xed\x6f\xdb\xbc\x11\xff\x3c\xff\x15\xf7\x08\x41\x20\x19\x2a\xf3\x7c\x0e\xe0\x01\x6e\x92\xa6\x1e\x8a\x26\x6b\x9a\x6d\x40\x11\xf4\xa1\xa5\x93\xc2\x46\x26\x35\x9a\x6a\x9b\xb9\xfa\xdf\x07\xbe\xc8\xa2\x5e\xfc\xb2\x35\xc0\x3a\x7f\x48\x6c\xf2\xde\xef\xf8\xbb\x23\x37\x1b\x48\x31\x63\x1c\x21\x48\x2a\x99\x06\x50\xd7\x93\xcd\xe6\x6c\x0a\xf3\x34\x05\xf5\x88\xb0\xa4\x6b\x84\x47\xa4\x29\x4a\xc8\x84\x34\x6b\x39\x72\x94\x54\x61\x0a\x19\x2b\x10\xa6\x67\x86\x09\x4e\xca\xa7\x1c\xce\x67\x96\xe5\x84\x5c\x08\x9e\xb1\x9c\xdc\xd2\xe4\x89\xe6\x68\x05\x83\xc2\x55\x59\x50\x85\x10\x58\x99\x01\x9c\xe8\x9d\x09\x5b\x95\x42\x2a\x08\x27\x00\x00\x89\xe0\x8a\x26\x0a\x82\x9c\xa9\xc7\x6a\x49\x12\xb1\x3a\x5b\xd1\xef\xac\x10\x57\xab\xd5\x6a\x75\x96\x8b\x57\xdf\x70\x79\xe6\xc8\x02\xc3\xe3\xd3\xe6\x42\xe4\x05\x9e\x55\x15\x4b\x47\x36\x19\x7f\x95\x0b\xce\x12\xfd\xcd\x6e\xe7\xe2\xb3\x12\xa2\xd8\xa7\x4f\xef\x3b\x59\x6b\x25\x19\xcf\xd7\xc1\x24\x9a\x18\xaf\x57\x22\xc5\x42\xfb\x1d\xd0\xb2\x34\x01\x9c\x64\x15\x4f\x40\xab\x5f\xa4\x21\x4b\xc1\x72\x44\x66\x85\xdc\xdf\x2f\x2e\x61\x63\x44\x55\x31\x7c\xd6\x8c\x66\xfd\x96\xca\x35\x86\x2c\x8d\x26\x7f\x92\xa8\x2a\xc9\xa1\x9a\x34\xa2\x38\x7e\x9b\x97\x2c\x4c\x0a\x86\x5c\xc1\xf4\xc2\xfc\x8f\x41\x94\x0a\xa6\xf3\x92\xdd\x94\x8a\x09\x1e\x99\xef\x4e\xb4\x58\x7e\xd1\x92\x4f\xe7\x25\xdb\x58\xf2\x73\xb0\xec\xf5\xc4\x10\xb0\xcc\xb0\xff\x36\x03\xce\x0a\xc7\xe4\xd6\x0b\xe4\xa1\x28\x15\x79\xc3\xb0\x48\xd7\x11\xfc\x19\x7e\xf7\x08\xf4\x87\x66\x5a\xf8\x3c\xd1\x6a\x2d\xd5\xa6\xee\x11\x90\x3b\x54\x76\xcb\x93\xf5\x29\xb8\x90\x48\x15\x06\x0f\x51\x87\x5c\x2c\xbf\x38\x0a\x62\x09\x60\x06\x34\x9b\xf4\x75\xfe\x77\x2a\xef\xcb\x74\xbf\x4a\x4b\x60\x55\x36\xdb\x56\xb6\xfd\xeb\xd2\x21\x96\x5f\x74\x42\xd4\x73\x89\xb0\x0d\xba\xce\x6d\x95\x28\x17\x1f\x2b\x10\x56\xb4\xfc\x64\x73\xfe\xf0\xe9\xc1\x7e\xf1\x39\x47\x79\x3a\x6b\xfa\xe3\x02\xe1\x7b\xbc\xdd\x73\x16\x0f\xf6\xac\xbd\x17\x9d\x32\x69\x35\x7b\xd4\x5d\x75\x6f\xe9\x1a\x96\x42\x14\x3b\x7c\x30\x5b\x4d\x29\x86\x34\x83\xa9\x2f\x2a\x6a\xa3\x9e\x59\xd6\xc6\xe7\xc8\x89\xa7\x19\xd1\x1a\x66\xa0\x64\x85\xcd\x8a\x53\x33\x83\x15\x7d\xc2\xb0\xa7\x2d\x36\x35\x68\xc5\x45\x36\x6f\x1a\x7b\x3e\xc7\x60\xd6\x74\xf1\x49\xca\x73\x04\xa7\xb1\x8d\xda\x56\xf2\x27\xb3\xf5\xe0\x6b\xad\xb5\x13\xfa\xc4\x72\x91\xe2\x5a\x0b\xc9\x58\xa1\x50\xbe\x17\xa9\xc6\xab\xf7\x66\xb5\x6e\xc2\x75\xc5\xd3\x52\x30\xae\x80\x71\x85\x32\xa3\x09\x3a\x35\xef\xd8\x5a\x85\x53\x07\x3e\xe4\x9a\xf1\xb7\x58\x94\xd6\x48\x9b\x97\x1d\x9b\x36\xa1\x3b\x36\xaf\x71\x97\xcc\x4b\x2c\x70\x94\xad\x31\xf4\xa2\x92\xe9\xeb\x8a\x15\x1a\xa1\x3b\x69\x9d\x97\x6c\xa4\xae\x36\x9b\x57\x2e\x78\x27\x5c\xc7\xc0\x45\xa3\xee\x9e\x26\x13\x26\xf2\x9e\xae\x34\x70\xc3\xb4\xf3\x73\x5e\xb2\x8e\x34\xe4\x69\xc3\x5e\x6f\xeb\xe4\x3d\x7e\xf3\x0c\xeb\x41\x57\x04\x53\xdf\x6a\x6b\x5c\xb2\x34\x88\xe5\x6d\xb8\x13\x7e\xd8\xe2\x64\x49\xb4\xb3\xa4\x6b\xf5\x4c\x1b\xd1\xb7\xdc\x59\x12\x6b\xd8\x8b\x26\x23\x2e\xb8\xd3\x9e\x2c\xdb\x92\x4f\x96\x1d\x7b\xa3\x0f\xa2\x52\x18\x96\x12\x33\xf6\xdd\x81\x7b\x0c\x12\x72\xc6\xc9\xc2\xec\xc9\x18\x4a\x96\x3c\x79\x27\x61\xaa\x37\xed\xde\xb5\x14\x55\xe9\x7c\x66\x19\xfc\xe6\xfa\x89\x3e\x23\xb7\x46\x64\x18\x9c\x05\x31\x58\xf1\x91\x97\x39\xa7\x70\xd6\xf4\x2b\x72\x67\x38\xff\x22\x18\xef\xb0\x78\x50\x60\xfa\xb1\x24\x46\x65\xd8\x6c\x9b\x9d\x47\xba\xbe\xd5\x26\x9e\xcf\xac\xa9\xae\x11\x9c\x9e\x9a\xa3\xa7\x97\x0c\xf0\x1f\x99\x00\xed\x47\x23\xf1\xc7\x8f\xad\x81\x0b\x3e\x97\x92\x3e\x1b\x71\x31\x7c\x7c\x2e\xb1\x93\x8e\xa8\xd7\x56\x92\xa5\xb3\x34\x8f\x21\xb0\x94\xed\xf4\x10\xc4\xe3\x69\x8e\x7a\x98\xed\xa5\xd3\xcf\x67\xbe\x3b\x9d\x4e\xa7\x49\x4b\x3f\x4f\x31\x94\x54\x3d\x6e\x93\x4c\x4b\xb6\x05\x86\x2d\xbc\x95\xcc\xa6\xf4\x7c\x06\x46\x48\x13\x6e\xaa\x1e\xa3\x0e\x05\xb9\xbe\xfa\x18\x06\xda\x91\xee\x59\x7e\x4b\x79\x5a\x60\x48\x4b\x46\x34\xb8\x44\x63\x5c\x67\xe7\x2c\xdd\xcb\x79\x8d\x03\xc6\xdb\x9b\xbb\x43\xfa\x2c\x28\x0d\x18\xe7\x1f\x2f\xde\x1e\xa1\xd3\xe2\x5d\x9f\xfb\xf2\xea\xdd\xd5\xc7\xab\x23\xd8\x2d\xb4\x45\x91\xc3\xe5\xdd\x25\xa6\x13\xee\xa0\xde\xec\x35\xdd\xa3\xc9\xb1\xde\x97\x98\x20\xfb\x8a\xd2\x51\x7c\x68\x7e\x7a\x22\x68\xc9\xee\x2c\x1c\xea\xaa\x97\x1a\xdc\x9b\x3a\x0a\xe6\x25\x0b\x7c\x5a\x33\xd5\x2d\x14\xae\x5a\xda\x20\x21\x16\xbe\x48\xe0\xd5\x9f\xb5\xc0\x20\x71\x57\x47\x5d\x0f\xc1\x77\xea\x63\xe7\x1b\xd3\x7d\x06\x5c\x76\x79\x4b\x75\xf7\xc4\x4a\x9b\xa5\x79\xa5\xc4\x55\x9a\x63\xdb\xab\x9b\x7d\x9b\x87\xe1\xfe\x3e\xe3\x9c\xf6\x1d\x73\xc7\x2d\x2b\x11\xf4\x71\x09\x1f\xb1\x28\xa1\xdf\x7d\x62\x48\x5a\xb2\x6e\x77\xb0\xfc\x9b\x8d\xc6\x84\x47\xba\xd6\x06\xad\x75\x52\xeb\x3a\x06\x34\x3f\x3a\xe4\x66\x7f\xb3\x71\x47\x36\xea\x99\x31\xcf\xb4\x8d\xfb\xec\x60\x3a\x45\x5d\x0b\x7e\x5a\xb7\x0d\xe7\xc1\x10\x54\x2d\x59\xd7\x00\xcb\x7f\xc3\x7f\x3e\x0a\x2e\xb1\xff\x93\x28\x68\x28\x3a\x18\x83\xa2\x21\xea\x2a\xff\x6b\x85\xf2\xb9\x2b\xea\x92\x2a\x7a\xd0\x07\x3d\x3c\x4e\x7b\x3d\x62\x3b\x7f\x79\x03\xbf\x45\x8e\xd7\x98\x09\xb9\xdf\xbe\x91\xc0\xb4\x66\x5d\xe3\x61\x07\x73\x3c\xe0\x9f\x3b\x63\xcd\xd0\xd3\x3f\x66\x87\x2f\x6d\x03\xd4\x68\xcf\xa2\xeb\x5d\xa7\x7d\x92\xcd\xbc\x64\xe7\xdd\x5b\xa1\x11\x1c\xd5\x03\x93\xc2\x44\x6b\x68\xb9\x75\x44\xcd\x04\x3b\xea\xaf\xdf\x91\x35\x01\xf9\x80\x6b\x51\xc9\x04\x6f\x69\x8e\xa1\x89\xd3\x5a\x51\x69\x86\xe2\x18\xd6\xec\x5f\x08\xa6\x13\x86\x5e\x92\x62\xf0\x9a\xe3\x76\x76\xd1\x31\x3c\x9f\xf5\xa0\xb5\xae\x89\x89\x64\xd8\xbd\x9b\xb1\x0c\x12\x62\xf1\x89\x6c\xab\x70\x70\x53\xdd\x4e\x0d\x7d\x52\xe3\x5a\x6c\x54\x76\xe5\x76\x47\xdc\xa4\x10\xdc\x9e\x5e\x33\x03\x95\x48\x2e\xf4\x4a\x18\x4d\x86\x96\x3b\x82\x9b\x2c\x5b\xa3\xb2\x21\x88\xc8\x3b\xb6\x62\x2a\xd4\x41\xe8\x99\x6f\x0a\xb9\x11\x3a\x2f\x8a\x7f\x18\x8b\xc8\xbc\x2c\x2f\x04\x57\xf8\x5d\xf5\x54\x7c\xa5\x12\x52\x7d\x3c\xbc\x28\xc2\xcc\xca\xd9\x1b\x18\x73\xa6\x76\x06\xc6\x88\x9c\x0d\x39\x5c\x7c\x8c\xf8\x7d\x01\x72\xd5\xa7\xc5\xc4\x6d\xb4\xc8\x85\xa8\xb8\x1a\x71\x69\x2b\x64\x78\x2e\xc6\x8a\xd0\xdd\x6b\x0e\x96\x61\x25\x99\xb9\x17\x0c\x1a\x95\xfe\x2c\x52\xb0\x38\x77\xc2\xc9\xe2\x92\x2c\xd6\xe6\x75\xa5\xae\xed\xbc\xa6\x41\xad\x58\x3b\x30\xb4\x14\x7a\x06\x35\xbf\x9b\x21\x11\xfe\xa8\x24\x3b\x0f\x58\x1a\xfc\xd1\x7a\xe0\x21\x8d\x71\x73\xc1\xff\x46\x0b\x96\xbe\x66\x3c\xbd\x97\x2c\xac\x24\xf3\x32\xc8\xdc\x90\x30\x28\xed\x6b\x1c\x86\x29\x36\xf3\xe9\xd0\x60\xf7\x58\x54\x49\x46\x16\x69\xd4\x1a\x6e\x17\x5a\x73\xa3\xc9\x58\x2d\x74\xe0\x70\xb4\x1e\x46\x49\xbd\x42\xe8\x4f\xd1\x30\x18\x83\xea\xda\xf1\xde\x70\x0c\x0d\x0b\xb9\xfa\x8e\xc9\x9e\x42\xe8\x00\x88\x4b\xf7\x71\xb5\xe1\xae\xca\x07\x6b\x63\x29\xd2\x67\x53\x1c\xdd\xce\xb7\x3b\x7b\xa1\xe6\xf0\x72\xb7\x13\x96\x9c\x05\xd1\xd8\xb5\xd9\x3c\x7e\x35\xf3\x68\xef\xde\xac\x2f\x42\x49\xf7\x2d\xcb\x3c\x7e\xfc\xf8\x01\xfd\x65\xf7\x4e\xd1\xbf\xe7\xd8\x75\x33\xf1\x12\x1b\x11\xb3\x00\x75\xfd\x30\x72\xc6\x0d\xc4\xdc\xa1\x1a\xa3\x37\xce\x92\x5b\xfa\x5c\x08\x9a\x92\x31\x8a\x5d\xa7\xbf\x7f\x87\x6a\xd6\x58\x06\xb9\x82\x50\x5f\x11\xb5\xd1\x76\xb2\x88\xe0\xf7\xfe\x55\x30\x21\x23\x53\xeb\xa6\xf7\xc0\xb0\x8d\x27\xba\x91\xdd\x8a\xeb\x05\xd4\x89\xec\xb8\x62\x08\x8d\x43\xd8\x73\x68\x37\x18\x6e\x83\xe5\xf0\x02\xc9\x3d\x67\xff\xac\x74\xc4\x6d\xf8\xdc\x81\x9b\xa7\xe9\x76\x16\x1a\xd3\x10\x1e\x69\x89\x55\xc3\x85\xea\xa8\x22\x84\x8c\x4c\x5a\xc3\x04\xc0\xf0\x5d\xe2\x70\x86\x7c\x44\xf0\xa6\xf8\xfd\x78\xd0\x12\x7a\x6d\x73\x7c\x76\x1c\x7a\x3e\xe2\x4b\x3d\x04\x46\x5b\xa3\xf4\x2b\xee\xeb\x83\x43\xe3\xed\xd4\x7b\x8c\xf5\x86\xd2\x03\xb3\x97\x31\xbf\x03\x5f\x61\x0b\x92\x87\xc0\xcb\x3d\x02\x1e\xdb\xd8\x7e\xa1\xbe\x76\xda\x6d\x6c\x3b\xd1\xf5\x17\x68\x7d\x46\xf3\x6c\xac\x36\x7c\xc7\xc2\x40\xba\xfc\x05\x31\x04\xfa\x30\x66\xa2\xe2\x69\xe0\xe5\xdb\x6a\x1b\x1f\x56\xb5\x12\xf7\xc6\xd1\x9b\x50\x8f\xec\x06\xd0\xef\x08\x56\xd8\xa0\x23\xb8\xe5\x17\xe9\x08\xf0\xc2\x5d\x01\xf6\x01\xd3\x60\xfd\x98\x0e\x01\x9d\x2e\xd1\x7b\xbb\x18\x3a\xf4\x9f\x74\x0a\x78\xc1\x6e\x01\xff\x07\x1d\x63\x98\x1c\x18\xef\x1c\xc7\x67\xd1\x07\x62\xef\x21\xe4\xf0\xf5\xab\x25\x7e\x99\x4e\x32\x34\xd9\x1e\xfa\xbd\xfd\x64\xbf\x27\x7b\x5a\xca\x88\x2b\x2f\xd8\x56\xba\xbe\xd4\x3f\xdd\x63\xae\xf1\x88\x0b\xfc\x2f\xdf\x60\x0e\x3d\x0a\x90\xbf\x3f\xa2\xc4\x70\x80\x87\x8b\xcb\xf0\x27\x5b\xc9\xf8\x35\xaa\x79\x0f\xda\x3f\x73\x38\xaa\xd1\x57\x86\x5d\x99\x35\x25\xfb\x86\xc9\xf5\xc8\xc5\xb9\xc9\xf8\xb6\x6c\xda\x6f\xff\x0e\x00\x00\xff\xff\x95\x8a\xef\x80\x9e\x21\x00\x00")

func tplCurdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTmpl,
		"tpl/curd.tmpl",
	)
}

func tplCurdTmpl() (*asset, error) {
	bytes, err := tplCurdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tmpl", size: 8606, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tmpl": tplCurdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tmpl": &bintree{tplCurdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
