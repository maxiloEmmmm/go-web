// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/maxiloEmmmm/go-web/ent/casbinrule"
)

// CasbinRule is the model entity for the CasbinRule schema.
type CasbinRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PType holds the value of the "PType" field.
	PType string `json:"PType,omitempty"`
	// V0 holds the value of the "v0" field.
	V0 string `json:"v0,omitempty"`
	// V1 holds the value of the "v1" field.
	V1 string `json:"v1,omitempty"`
	// V2 holds the value of the "v2" field.
	V2 string `json:"v2,omitempty"`
	// V3 holds the value of the "v3" field.
	V3 string `json:"v3,omitempty"`
	// V4 holds the value of the "v4" field.
	V4 string `json:"v4,omitempty"`
	// V5 holds the value of the "v5" field.
	V5 string `json:"v5,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CasbinRule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PType
		&sql.NullString{}, // v0
		&sql.NullString{}, // v1
		&sql.NullString{}, // v2
		&sql.NullString{}, // v3
		&sql.NullString{}, // v4
		&sql.NullString{}, // v5
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CasbinRule fields.
func (cr *CasbinRule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(casbinrule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PType", values[0])
	} else if value.Valid {
		cr.PType = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v0", values[1])
	} else if value.Valid {
		cr.V0 = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v1", values[2])
	} else if value.Valid {
		cr.V1 = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v2", values[3])
	} else if value.Valid {
		cr.V2 = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v3", values[4])
	} else if value.Valid {
		cr.V3 = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v4", values[5])
	} else if value.Valid {
		cr.V4 = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field v5", values[6])
	} else if value.Valid {
		cr.V5 = value.String
	}
	return nil
}

// Update returns a builder for updating this CasbinRule.
// Note that, you need to call CasbinRule.Unwrap() before calling this method, if this CasbinRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CasbinRule) Update() *CasbinRuleUpdateOne {
	return (&CasbinRuleClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cr *CasbinRule) Unwrap() *CasbinRule {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CasbinRule is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CasbinRule) String() string {
	var builder strings.Builder
	builder.WriteString("CasbinRule(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", PType=")
	builder.WriteString(cr.PType)
	builder.WriteString(", v0=")
	builder.WriteString(cr.V0)
	builder.WriteString(", v1=")
	builder.WriteString(cr.V1)
	builder.WriteString(", v2=")
	builder.WriteString(cr.V2)
	builder.WriteString(", v3=")
	builder.WriteString(cr.V3)
	builder.WriteString(", v4=")
	builder.WriteString(cr.V4)
	builder.WriteString(", v5=")
	builder.WriteString(cr.V5)
	builder.WriteByte(')')
	return builder.String()
}

// CasbinRules is a parsable slice of CasbinRule.
type CasbinRules []*CasbinRule

func (cr CasbinRules) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
